// planbook.proto
syntax = "proto3";

package planbook;

import "common.proto";
import "radius.proto";

// selectPlanbookSchema:
// id
// planId
// businessId
// period
// price
// groupname
// tenantId
message Planbook {
  string id = 1;
  string plan_id = 2;
  string business_id = 3;
  string period = 4;
  string price = 5;
  string groupname = 6;
  string billing_type = 7;
  string tenant_id = 8;
}

message PlanbookDetails {
  string id = 1;
  string plan_id = 2;
  string plan_name = 3;
  string plan_type = 4;
  string plan_upspeed = 5;
  string plan_downspeed = 6;
  string plan_upspeed_unit = 7;
  string plan_downspeed_unit = 8;
  string business_id = 9;
  string business_name = 10;
  string period = 11;
  string price = 12;
  string groupname = 13;
  string billing_type = 14;
  string tenant_id = 15;
}

// Planbook service for managing planbook entries
service PlanbookService {
  // Create a new planbook entry
  rpc CreatePlanbook(CreatePlanbookRequest) returns (CreatePlanbookResponse);
  
  // Update a planbook entry's pricing information
  rpc UpdatePlanbook(UpdatePlanbookRequest) returns (UpdatePlanbookResponse);
  
  // Get a specific planbook entry by ID
  rpc GetPlanbook(GetPlanbookRequest) returns (GetPlanbookResponse);
  
  // Get all planbook entries
  rpc GetPlanbooks(GetPlanbooksRequest) returns (GetPlanbooksResponse);

  // Get businesses planbook for a specific plan
  rpc GetBusinessesPlanbookForPlan(GetBusinessesPlanbookForPlanRequest) returns (GetBusinessesPlanbookForPlanResponse);

  // Get plans planbook for a specific business
  rpc GetPlansPlanbookForBusiness(GetPlansPlanbookForBusinessRequest) returns (GetPlansPlanbookForBusinessResponse);
}

// Request to create a new planbook entry
message CreatePlanbookRequest {
  common.AuthContext auth_context = 1;
  
  // Planbook parameters
  message PlanbookParams {
    string plan_id = 1;
    string billing_type = 2; 
    optional string business_id = 3;
    optional double price = 4;
    optional string period = 5;
  }
  
  PlanbookParams planbook_params = 2;
}


// Response from creating a new planbook entry
message CreatePlanbookResponse {
  repeated Planbook planbooks = 1;
  repeated radius.Radgroupreply radgroupreply_entry = 2;
}

// Request to update a planbook entry
message UpdatePlanbookRequest {
  common.AuthContext auth_context = 1;
  string planbook_id = 2;
  
  // Planbook parameters to update
  message PlanbookParams {
    optional double price = 1;
    optional string period = 2;
    optional string billing_type = 3;
  }
  
  PlanbookParams planbook_params = 3;
}

// Response from updating a planbook entry
message UpdatePlanbookResponse {
  repeated Planbook planbooks = 1;
}

// Request to get a specific planbook entry
message GetPlanbookRequest {
  common.AuthContext auth_context = 1;
  string planbook_id = 2;
}

// Response with planbook entry details
message GetPlanbookResponse {
  repeated Planbook planbooks = 1;
}

// Request to get all planbook entries
message GetPlanbooksRequest {
  // Authentication context
  common.AuthContext auth_context = 1;
  
  // Pagination limit (max number of items to return)
  int32 limit = 2;
  
  // Pagination offset (starting position)
  int32 offset = 3;
  
  // Optional search term to filter by plan name, business name, or price
  optional string search = 4;
  
  // Optional list of plan types to filter by (Commercial, Enterprise)
  repeated string plan_types = 5;
  
  // Optional list of business IDs to filter by
  repeated string business_ids = 6;
  
  // Optional list of plan IDs to filter by
  repeated string plan_ids = 7;

  // Optional list of billing types to filter by
  repeated string billing_types = 8;
}

// Response with all planbook entries
message GetPlanbooksResponse {
  // List of planbook entries
  repeated PlanbookDetails planbooks = 1;
  
  // Pagination metadata
  common.PaginationMeta meta = 2;
}

message BusinessPlanbookForPlan {
  string id = 1;
  string name = 2;
  string type = 3;
  string billing_type = 4;
  int32 customer_count = 5;
  string price = 6;
  string period = 7;
  string tenant_id = 8;
  string business_id = 9;
}

message GetBusinessesPlanbookForPlanRequest {
  common.AuthContext auth_context = 1;
  string plan_id = 2;

  // Pagination limit (max number of items to return)
  int32 limit = 3;
  
  // Pagination offset (starting position)
  int32 offset = 4;

  // Search term to filter businesses
  optional string search = 5;

  // Filter for business types
  repeated string type = 6;

  // Filter for billing types
  repeated string billing_type = 7;
}

// Response with all businesses
message GetBusinessesPlanbookForPlanResponse {
  // List of businesses
  repeated BusinessPlanbookForPlan businesses = 1;
  
  // Pagination metadata
  common.PaginationMeta meta = 2;
}

message PlansPlanbookForBusiness {
  string id = 1;
  string name = 2;
  int32 up_speed = 3;
  int32 down_speed = 4;
  string up_speed_unit = 5;
  string down_speed_unit = 6;
  bool is_post_fup = 7;
  optional string data_limit = 8;
  string type = 9;
  string billing_type = 10;
  string price = 11;
  string period = 12;
  int32 customer_count = 13;
  string tenant_id = 14;
  string plan_id = 15;
}

// Request to get all internet service plans
message GetPlansPlanbookForBusinessRequest {
  common.AuthContext auth_context = 1;
  
  // Pagination limit (max number of items to return)
  int32 limit = 2;
  
  // Pagination offset (starting position)
  int32 offset = 3;
  
  // Search term to filter plans by name
  string search = 4;
  
  // Filter plans by type (Commercial, Enterprise)
  repeated string types = 5;

  // Filter planbooks by billing types
  repeated string billing_types = 6;

  // Filter plans by business id
  string business_id = 7;
}

message GetPlansPlanbookForBusinessResponse {
  // List of plans
  repeated PlansPlanbookForBusiness plans = 1;
  
  // Pagination metadata
  common.PaginationMeta meta = 2;
}
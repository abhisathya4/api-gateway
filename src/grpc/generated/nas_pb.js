// source: nas.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var common_pb = require('./common_pb.js');
goog.object.extend(proto, common_pb);
goog.exportSymbol('proto.nas.Nas', null, global);
goog.exportSymbol('proto.nas.RegisterNasDeviceRequest', null, global);
goog.exportSymbol('proto.nas.RegisterNasDeviceRequest.DeviceParams', null, global);
goog.exportSymbol('proto.nas.RegisterNasDeviceResponse', null, global);
goog.exportSymbol('proto.nas.SysRegisterNasDeviceRequest', null, global);
goog.exportSymbol('proto.nas.SysRegisterNasDeviceRequest.DeviceParams', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nas.RegisterNasDeviceRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nas.RegisterNasDeviceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nas.RegisterNasDeviceRequest.displayName = 'proto.nas.RegisterNasDeviceRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nas.RegisterNasDeviceRequest.DeviceParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nas.RegisterNasDeviceRequest.DeviceParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nas.RegisterNasDeviceRequest.DeviceParams.displayName = 'proto.nas.RegisterNasDeviceRequest.DeviceParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nas.SysRegisterNasDeviceRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nas.SysRegisterNasDeviceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nas.SysRegisterNasDeviceRequest.displayName = 'proto.nas.SysRegisterNasDeviceRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nas.SysRegisterNasDeviceRequest.DeviceParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nas.SysRegisterNasDeviceRequest.DeviceParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nas.SysRegisterNasDeviceRequest.DeviceParams.displayName = 'proto.nas.SysRegisterNasDeviceRequest.DeviceParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nas.Nas = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nas.Nas, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nas.Nas.displayName = 'proto.nas.Nas';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nas.RegisterNasDeviceResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.nas.RegisterNasDeviceResponse.repeatedFields_, null);
};
goog.inherits(proto.nas.RegisterNasDeviceResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nas.RegisterNasDeviceResponse.displayName = 'proto.nas.RegisterNasDeviceResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nas.RegisterNasDeviceRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.nas.RegisterNasDeviceRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nas.RegisterNasDeviceRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nas.RegisterNasDeviceRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    authContext: (f = msg.getAuthContext()) && common_pb.AuthContext.toObject(includeInstance, f),
    deviceParams: (f = msg.getDeviceParams()) && proto.nas.RegisterNasDeviceRequest.DeviceParams.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nas.RegisterNasDeviceRequest}
 */
proto.nas.RegisterNasDeviceRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nas.RegisterNasDeviceRequest;
  return proto.nas.RegisterNasDeviceRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nas.RegisterNasDeviceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nas.RegisterNasDeviceRequest}
 */
proto.nas.RegisterNasDeviceRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.AuthContext;
      reader.readMessage(value,common_pb.AuthContext.deserializeBinaryFromReader);
      msg.setAuthContext(value);
      break;
    case 2:
      var value = new proto.nas.RegisterNasDeviceRequest.DeviceParams;
      reader.readMessage(value,proto.nas.RegisterNasDeviceRequest.DeviceParams.deserializeBinaryFromReader);
      msg.setDeviceParams(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nas.RegisterNasDeviceRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nas.RegisterNasDeviceRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nas.RegisterNasDeviceRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nas.RegisterNasDeviceRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAuthContext();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_pb.AuthContext.serializeBinaryToWriter
    );
  }
  f = message.getDeviceParams();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.nas.RegisterNasDeviceRequest.DeviceParams.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nas.RegisterNasDeviceRequest.DeviceParams.prototype.toObject = function(opt_includeInstance) {
  return proto.nas.RegisterNasDeviceRequest.DeviceParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nas.RegisterNasDeviceRequest.DeviceParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nas.RegisterNasDeviceRequest.DeviceParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    nasname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    shortname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    type: jspb.Message.getFieldWithDefault(msg, 3, ""),
    ports: jspb.Message.getFieldWithDefault(msg, 4, 0),
    secret: jspb.Message.getFieldWithDefault(msg, 5, ""),
    server: jspb.Message.getFieldWithDefault(msg, 6, ""),
    community: jspb.Message.getFieldWithDefault(msg, 7, ""),
    description: jspb.Message.getFieldWithDefault(msg, 8, ""),
    requireMa: jspb.Message.getFieldWithDefault(msg, 9, ""),
    limitProxyState: jspb.Message.getFieldWithDefault(msg, 10, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nas.RegisterNasDeviceRequest.DeviceParams}
 */
proto.nas.RegisterNasDeviceRequest.DeviceParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nas.RegisterNasDeviceRequest.DeviceParams;
  return proto.nas.RegisterNasDeviceRequest.DeviceParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nas.RegisterNasDeviceRequest.DeviceParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nas.RegisterNasDeviceRequest.DeviceParams}
 */
proto.nas.RegisterNasDeviceRequest.DeviceParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNasname(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setShortname(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPorts(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSecret(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setServer(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setCommunity(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequireMa(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setLimitProxyState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nas.RegisterNasDeviceRequest.DeviceParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nas.RegisterNasDeviceRequest.DeviceParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nas.RegisterNasDeviceRequest.DeviceParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nas.RegisterNasDeviceRequest.DeviceParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNasname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getShortname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getSecret();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeString(
      7,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeString(
      8,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeString(
      9,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeString(
      10,
      f
    );
  }
};


/**
 * optional string nasname = 1;
 * @return {string}
 */
proto.nas.RegisterNasDeviceRequest.DeviceParams.prototype.getNasname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nas.RegisterNasDeviceRequest.DeviceParams} returns this
 */
proto.nas.RegisterNasDeviceRequest.DeviceParams.prototype.setNasname = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string shortname = 2;
 * @return {string}
 */
proto.nas.RegisterNasDeviceRequest.DeviceParams.prototype.getShortname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.nas.RegisterNasDeviceRequest.DeviceParams} returns this
 */
proto.nas.RegisterNasDeviceRequest.DeviceParams.prototype.setShortname = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string type = 3;
 * @return {string}
 */
proto.nas.RegisterNasDeviceRequest.DeviceParams.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.nas.RegisterNasDeviceRequest.DeviceParams} returns this
 */
proto.nas.RegisterNasDeviceRequest.DeviceParams.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 ports = 4;
 * @return {number}
 */
proto.nas.RegisterNasDeviceRequest.DeviceParams.prototype.getPorts = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.nas.RegisterNasDeviceRequest.DeviceParams} returns this
 */
proto.nas.RegisterNasDeviceRequest.DeviceParams.prototype.setPorts = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.nas.RegisterNasDeviceRequest.DeviceParams} returns this
 */
proto.nas.RegisterNasDeviceRequest.DeviceParams.prototype.clearPorts = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nas.RegisterNasDeviceRequest.DeviceParams.prototype.hasPorts = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string secret = 5;
 * @return {string}
 */
proto.nas.RegisterNasDeviceRequest.DeviceParams.prototype.getSecret = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.nas.RegisterNasDeviceRequest.DeviceParams} returns this
 */
proto.nas.RegisterNasDeviceRequest.DeviceParams.prototype.setSecret = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string server = 6;
 * @return {string}
 */
proto.nas.RegisterNasDeviceRequest.DeviceParams.prototype.getServer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.nas.RegisterNasDeviceRequest.DeviceParams} returns this
 */
proto.nas.RegisterNasDeviceRequest.DeviceParams.prototype.setServer = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.nas.RegisterNasDeviceRequest.DeviceParams} returns this
 */
proto.nas.RegisterNasDeviceRequest.DeviceParams.prototype.clearServer = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nas.RegisterNasDeviceRequest.DeviceParams.prototype.hasServer = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string community = 7;
 * @return {string}
 */
proto.nas.RegisterNasDeviceRequest.DeviceParams.prototype.getCommunity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.nas.RegisterNasDeviceRequest.DeviceParams} returns this
 */
proto.nas.RegisterNasDeviceRequest.DeviceParams.prototype.setCommunity = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.nas.RegisterNasDeviceRequest.DeviceParams} returns this
 */
proto.nas.RegisterNasDeviceRequest.DeviceParams.prototype.clearCommunity = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nas.RegisterNasDeviceRequest.DeviceParams.prototype.hasCommunity = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string description = 8;
 * @return {string}
 */
proto.nas.RegisterNasDeviceRequest.DeviceParams.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.nas.RegisterNasDeviceRequest.DeviceParams} returns this
 */
proto.nas.RegisterNasDeviceRequest.DeviceParams.prototype.setDescription = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.nas.RegisterNasDeviceRequest.DeviceParams} returns this
 */
proto.nas.RegisterNasDeviceRequest.DeviceParams.prototype.clearDescription = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nas.RegisterNasDeviceRequest.DeviceParams.prototype.hasDescription = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional string require_ma = 9;
 * @return {string}
 */
proto.nas.RegisterNasDeviceRequest.DeviceParams.prototype.getRequireMa = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.nas.RegisterNasDeviceRequest.DeviceParams} returns this
 */
proto.nas.RegisterNasDeviceRequest.DeviceParams.prototype.setRequireMa = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.nas.RegisterNasDeviceRequest.DeviceParams} returns this
 */
proto.nas.RegisterNasDeviceRequest.DeviceParams.prototype.clearRequireMa = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nas.RegisterNasDeviceRequest.DeviceParams.prototype.hasRequireMa = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional string limit_proxy_state = 10;
 * @return {string}
 */
proto.nas.RegisterNasDeviceRequest.DeviceParams.prototype.getLimitProxyState = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.nas.RegisterNasDeviceRequest.DeviceParams} returns this
 */
proto.nas.RegisterNasDeviceRequest.DeviceParams.prototype.setLimitProxyState = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.nas.RegisterNasDeviceRequest.DeviceParams} returns this
 */
proto.nas.RegisterNasDeviceRequest.DeviceParams.prototype.clearLimitProxyState = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nas.RegisterNasDeviceRequest.DeviceParams.prototype.hasLimitProxyState = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional common.AuthContext auth_context = 1;
 * @return {?proto.common.AuthContext}
 */
proto.nas.RegisterNasDeviceRequest.prototype.getAuthContext = function() {
  return /** @type{?proto.common.AuthContext} */ (
    jspb.Message.getWrapperField(this, common_pb.AuthContext, 1));
};


/**
 * @param {?proto.common.AuthContext|undefined} value
 * @return {!proto.nas.RegisterNasDeviceRequest} returns this
*/
proto.nas.RegisterNasDeviceRequest.prototype.setAuthContext = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nas.RegisterNasDeviceRequest} returns this
 */
proto.nas.RegisterNasDeviceRequest.prototype.clearAuthContext = function() {
  return this.setAuthContext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nas.RegisterNasDeviceRequest.prototype.hasAuthContext = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional DeviceParams device_params = 2;
 * @return {?proto.nas.RegisterNasDeviceRequest.DeviceParams}
 */
proto.nas.RegisterNasDeviceRequest.prototype.getDeviceParams = function() {
  return /** @type{?proto.nas.RegisterNasDeviceRequest.DeviceParams} */ (
    jspb.Message.getWrapperField(this, proto.nas.RegisterNasDeviceRequest.DeviceParams, 2));
};


/**
 * @param {?proto.nas.RegisterNasDeviceRequest.DeviceParams|undefined} value
 * @return {!proto.nas.RegisterNasDeviceRequest} returns this
*/
proto.nas.RegisterNasDeviceRequest.prototype.setDeviceParams = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nas.RegisterNasDeviceRequest} returns this
 */
proto.nas.RegisterNasDeviceRequest.prototype.clearDeviceParams = function() {
  return this.setDeviceParams(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nas.RegisterNasDeviceRequest.prototype.hasDeviceParams = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nas.SysRegisterNasDeviceRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.nas.SysRegisterNasDeviceRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nas.SysRegisterNasDeviceRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nas.SysRegisterNasDeviceRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceParams: (f = msg.getDeviceParams()) && proto.nas.SysRegisterNasDeviceRequest.DeviceParams.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nas.SysRegisterNasDeviceRequest}
 */
proto.nas.SysRegisterNasDeviceRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nas.SysRegisterNasDeviceRequest;
  return proto.nas.SysRegisterNasDeviceRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nas.SysRegisterNasDeviceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nas.SysRegisterNasDeviceRequest}
 */
proto.nas.SysRegisterNasDeviceRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nas.SysRegisterNasDeviceRequest.DeviceParams;
      reader.readMessage(value,proto.nas.SysRegisterNasDeviceRequest.DeviceParams.deserializeBinaryFromReader);
      msg.setDeviceParams(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nas.SysRegisterNasDeviceRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nas.SysRegisterNasDeviceRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nas.SysRegisterNasDeviceRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nas.SysRegisterNasDeviceRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeviceParams();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.nas.SysRegisterNasDeviceRequest.DeviceParams.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nas.SysRegisterNasDeviceRequest.DeviceParams.prototype.toObject = function(opt_includeInstance) {
  return proto.nas.SysRegisterNasDeviceRequest.DeviceParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nas.SysRegisterNasDeviceRequest.DeviceParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nas.SysRegisterNasDeviceRequest.DeviceParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    nasname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    shortname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    type: jspb.Message.getFieldWithDefault(msg, 3, ""),
    ports: jspb.Message.getFieldWithDefault(msg, 4, 0),
    secret: jspb.Message.getFieldWithDefault(msg, 5, ""),
    server: jspb.Message.getFieldWithDefault(msg, 6, ""),
    community: jspb.Message.getFieldWithDefault(msg, 7, ""),
    description: jspb.Message.getFieldWithDefault(msg, 8, ""),
    requireMa: jspb.Message.getFieldWithDefault(msg, 9, ""),
    limitProxyState: jspb.Message.getFieldWithDefault(msg, 10, ""),
    organizationId: jspb.Message.getFieldWithDefault(msg, 11, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nas.SysRegisterNasDeviceRequest.DeviceParams}
 */
proto.nas.SysRegisterNasDeviceRequest.DeviceParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nas.SysRegisterNasDeviceRequest.DeviceParams;
  return proto.nas.SysRegisterNasDeviceRequest.DeviceParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nas.SysRegisterNasDeviceRequest.DeviceParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nas.SysRegisterNasDeviceRequest.DeviceParams}
 */
proto.nas.SysRegisterNasDeviceRequest.DeviceParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNasname(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setShortname(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPorts(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSecret(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setServer(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setCommunity(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequireMa(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setLimitProxyState(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrganizationId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nas.SysRegisterNasDeviceRequest.DeviceParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nas.SysRegisterNasDeviceRequest.DeviceParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nas.SysRegisterNasDeviceRequest.DeviceParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nas.SysRegisterNasDeviceRequest.DeviceParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNasname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getShortname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getSecret();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeString(
      7,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeString(
      8,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeString(
      9,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getOrganizationId();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
};


/**
 * optional string nasname = 1;
 * @return {string}
 */
proto.nas.SysRegisterNasDeviceRequest.DeviceParams.prototype.getNasname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nas.SysRegisterNasDeviceRequest.DeviceParams} returns this
 */
proto.nas.SysRegisterNasDeviceRequest.DeviceParams.prototype.setNasname = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string shortname = 2;
 * @return {string}
 */
proto.nas.SysRegisterNasDeviceRequest.DeviceParams.prototype.getShortname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.nas.SysRegisterNasDeviceRequest.DeviceParams} returns this
 */
proto.nas.SysRegisterNasDeviceRequest.DeviceParams.prototype.setShortname = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string type = 3;
 * @return {string}
 */
proto.nas.SysRegisterNasDeviceRequest.DeviceParams.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.nas.SysRegisterNasDeviceRequest.DeviceParams} returns this
 */
proto.nas.SysRegisterNasDeviceRequest.DeviceParams.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 ports = 4;
 * @return {number}
 */
proto.nas.SysRegisterNasDeviceRequest.DeviceParams.prototype.getPorts = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.nas.SysRegisterNasDeviceRequest.DeviceParams} returns this
 */
proto.nas.SysRegisterNasDeviceRequest.DeviceParams.prototype.setPorts = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.nas.SysRegisterNasDeviceRequest.DeviceParams} returns this
 */
proto.nas.SysRegisterNasDeviceRequest.DeviceParams.prototype.clearPorts = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nas.SysRegisterNasDeviceRequest.DeviceParams.prototype.hasPorts = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string secret = 5;
 * @return {string}
 */
proto.nas.SysRegisterNasDeviceRequest.DeviceParams.prototype.getSecret = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.nas.SysRegisterNasDeviceRequest.DeviceParams} returns this
 */
proto.nas.SysRegisterNasDeviceRequest.DeviceParams.prototype.setSecret = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string server = 6;
 * @return {string}
 */
proto.nas.SysRegisterNasDeviceRequest.DeviceParams.prototype.getServer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.nas.SysRegisterNasDeviceRequest.DeviceParams} returns this
 */
proto.nas.SysRegisterNasDeviceRequest.DeviceParams.prototype.setServer = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.nas.SysRegisterNasDeviceRequest.DeviceParams} returns this
 */
proto.nas.SysRegisterNasDeviceRequest.DeviceParams.prototype.clearServer = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nas.SysRegisterNasDeviceRequest.DeviceParams.prototype.hasServer = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string community = 7;
 * @return {string}
 */
proto.nas.SysRegisterNasDeviceRequest.DeviceParams.prototype.getCommunity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.nas.SysRegisterNasDeviceRequest.DeviceParams} returns this
 */
proto.nas.SysRegisterNasDeviceRequest.DeviceParams.prototype.setCommunity = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.nas.SysRegisterNasDeviceRequest.DeviceParams} returns this
 */
proto.nas.SysRegisterNasDeviceRequest.DeviceParams.prototype.clearCommunity = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nas.SysRegisterNasDeviceRequest.DeviceParams.prototype.hasCommunity = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string description = 8;
 * @return {string}
 */
proto.nas.SysRegisterNasDeviceRequest.DeviceParams.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.nas.SysRegisterNasDeviceRequest.DeviceParams} returns this
 */
proto.nas.SysRegisterNasDeviceRequest.DeviceParams.prototype.setDescription = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.nas.SysRegisterNasDeviceRequest.DeviceParams} returns this
 */
proto.nas.SysRegisterNasDeviceRequest.DeviceParams.prototype.clearDescription = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nas.SysRegisterNasDeviceRequest.DeviceParams.prototype.hasDescription = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional string require_ma = 9;
 * @return {string}
 */
proto.nas.SysRegisterNasDeviceRequest.DeviceParams.prototype.getRequireMa = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.nas.SysRegisterNasDeviceRequest.DeviceParams} returns this
 */
proto.nas.SysRegisterNasDeviceRequest.DeviceParams.prototype.setRequireMa = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.nas.SysRegisterNasDeviceRequest.DeviceParams} returns this
 */
proto.nas.SysRegisterNasDeviceRequest.DeviceParams.prototype.clearRequireMa = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nas.SysRegisterNasDeviceRequest.DeviceParams.prototype.hasRequireMa = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional string limit_proxy_state = 10;
 * @return {string}
 */
proto.nas.SysRegisterNasDeviceRequest.DeviceParams.prototype.getLimitProxyState = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.nas.SysRegisterNasDeviceRequest.DeviceParams} returns this
 */
proto.nas.SysRegisterNasDeviceRequest.DeviceParams.prototype.setLimitProxyState = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.nas.SysRegisterNasDeviceRequest.DeviceParams} returns this
 */
proto.nas.SysRegisterNasDeviceRequest.DeviceParams.prototype.clearLimitProxyState = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nas.SysRegisterNasDeviceRequest.DeviceParams.prototype.hasLimitProxyState = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional string organization_id = 11;
 * @return {string}
 */
proto.nas.SysRegisterNasDeviceRequest.DeviceParams.prototype.getOrganizationId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.nas.SysRegisterNasDeviceRequest.DeviceParams} returns this
 */
proto.nas.SysRegisterNasDeviceRequest.DeviceParams.prototype.setOrganizationId = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional DeviceParams device_params = 1;
 * @return {?proto.nas.SysRegisterNasDeviceRequest.DeviceParams}
 */
proto.nas.SysRegisterNasDeviceRequest.prototype.getDeviceParams = function() {
  return /** @type{?proto.nas.SysRegisterNasDeviceRequest.DeviceParams} */ (
    jspb.Message.getWrapperField(this, proto.nas.SysRegisterNasDeviceRequest.DeviceParams, 1));
};


/**
 * @param {?proto.nas.SysRegisterNasDeviceRequest.DeviceParams|undefined} value
 * @return {!proto.nas.SysRegisterNasDeviceRequest} returns this
*/
proto.nas.SysRegisterNasDeviceRequest.prototype.setDeviceParams = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nas.SysRegisterNasDeviceRequest} returns this
 */
proto.nas.SysRegisterNasDeviceRequest.prototype.clearDeviceParams = function() {
  return this.setDeviceParams(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nas.SysRegisterNasDeviceRequest.prototype.hasDeviceParams = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nas.Nas.prototype.toObject = function(opt_includeInstance) {
  return proto.nas.Nas.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nas.Nas} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nas.Nas.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    nasname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    shortname: jspb.Message.getFieldWithDefault(msg, 3, ""),
    type: jspb.Message.getFieldWithDefault(msg, 4, ""),
    ports: jspb.Message.getFieldWithDefault(msg, 5, 0),
    secret: jspb.Message.getFieldWithDefault(msg, 6, ""),
    server: jspb.Message.getFieldWithDefault(msg, 7, ""),
    community: jspb.Message.getFieldWithDefault(msg, 8, ""),
    description: jspb.Message.getFieldWithDefault(msg, 9, ""),
    requireMa: jspb.Message.getFieldWithDefault(msg, 10, ""),
    limitProxyState: jspb.Message.getFieldWithDefault(msg, 11, ""),
    tenantId: jspb.Message.getFieldWithDefault(msg, 12, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nas.Nas}
 */
proto.nas.Nas.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nas.Nas;
  return proto.nas.Nas.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nas.Nas} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nas.Nas}
 */
proto.nas.Nas.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNasname(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setShortname(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPorts(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setSecret(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setServer(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setCommunity(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequireMa(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setLimitProxyState(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setTenantId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nas.Nas.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nas.Nas.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nas.Nas} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nas.Nas.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNasname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getShortname();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getSecret();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeString(
      7,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeString(
      8,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getRequireMa();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getLimitProxyState();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getTenantId();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.nas.Nas.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nas.Nas} returns this
 */
proto.nas.Nas.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string nasname = 2;
 * @return {string}
 */
proto.nas.Nas.prototype.getNasname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.nas.Nas} returns this
 */
proto.nas.Nas.prototype.setNasname = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string shortname = 3;
 * @return {string}
 */
proto.nas.Nas.prototype.getShortname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.nas.Nas} returns this
 */
proto.nas.Nas.prototype.setShortname = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string type = 4;
 * @return {string}
 */
proto.nas.Nas.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.nas.Nas} returns this
 */
proto.nas.Nas.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int32 ports = 5;
 * @return {number}
 */
proto.nas.Nas.prototype.getPorts = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.nas.Nas} returns this
 */
proto.nas.Nas.prototype.setPorts = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.nas.Nas} returns this
 */
proto.nas.Nas.prototype.clearPorts = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nas.Nas.prototype.hasPorts = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string secret = 6;
 * @return {string}
 */
proto.nas.Nas.prototype.getSecret = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.nas.Nas} returns this
 */
proto.nas.Nas.prototype.setSecret = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string server = 7;
 * @return {string}
 */
proto.nas.Nas.prototype.getServer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.nas.Nas} returns this
 */
proto.nas.Nas.prototype.setServer = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.nas.Nas} returns this
 */
proto.nas.Nas.prototype.clearServer = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nas.Nas.prototype.hasServer = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string community = 8;
 * @return {string}
 */
proto.nas.Nas.prototype.getCommunity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.nas.Nas} returns this
 */
proto.nas.Nas.prototype.setCommunity = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.nas.Nas} returns this
 */
proto.nas.Nas.prototype.clearCommunity = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nas.Nas.prototype.hasCommunity = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional string description = 9;
 * @return {string}
 */
proto.nas.Nas.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.nas.Nas} returns this
 */
proto.nas.Nas.prototype.setDescription = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.nas.Nas} returns this
 */
proto.nas.Nas.prototype.clearDescription = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nas.Nas.prototype.hasDescription = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional string require_ma = 10;
 * @return {string}
 */
proto.nas.Nas.prototype.getRequireMa = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.nas.Nas} returns this
 */
proto.nas.Nas.prototype.setRequireMa = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string limit_proxy_state = 11;
 * @return {string}
 */
proto.nas.Nas.prototype.getLimitProxyState = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.nas.Nas} returns this
 */
proto.nas.Nas.prototype.setLimitProxyState = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string tenant_id = 12;
 * @return {string}
 */
proto.nas.Nas.prototype.getTenantId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.nas.Nas} returns this
 */
proto.nas.Nas.prototype.setTenantId = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.nas.RegisterNasDeviceResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nas.RegisterNasDeviceResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.nas.RegisterNasDeviceResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nas.RegisterNasDeviceResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nas.RegisterNasDeviceResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    nasDevicesList: jspb.Message.toObjectList(msg.getNasDevicesList(),
    proto.nas.Nas.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nas.RegisterNasDeviceResponse}
 */
proto.nas.RegisterNasDeviceResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nas.RegisterNasDeviceResponse;
  return proto.nas.RegisterNasDeviceResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nas.RegisterNasDeviceResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nas.RegisterNasDeviceResponse}
 */
proto.nas.RegisterNasDeviceResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nas.Nas;
      reader.readMessage(value,proto.nas.Nas.deserializeBinaryFromReader);
      msg.addNasDevices(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nas.RegisterNasDeviceResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nas.RegisterNasDeviceResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nas.RegisterNasDeviceResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nas.RegisterNasDeviceResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNasDevicesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.nas.Nas.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Nas nas_devices = 1;
 * @return {!Array<!proto.nas.Nas>}
 */
proto.nas.RegisterNasDeviceResponse.prototype.getNasDevicesList = function() {
  return /** @type{!Array<!proto.nas.Nas>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.nas.Nas, 1));
};


/**
 * @param {!Array<!proto.nas.Nas>} value
 * @return {!proto.nas.RegisterNasDeviceResponse} returns this
*/
proto.nas.RegisterNasDeviceResponse.prototype.setNasDevicesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.nas.Nas=} opt_value
 * @param {number=} opt_index
 * @return {!proto.nas.Nas}
 */
proto.nas.RegisterNasDeviceResponse.prototype.addNasDevices = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.nas.Nas, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.nas.RegisterNasDeviceResponse} returns this
 */
proto.nas.RegisterNasDeviceResponse.prototype.clearNasDevicesList = function() {
  return this.setNasDevicesList([]);
};


goog.object.extend(exports, proto.nas);

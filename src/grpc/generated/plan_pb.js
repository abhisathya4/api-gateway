// source: plan.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var common_pb = require('./common_pb.js');
goog.object.extend(proto, common_pb);
var radius_pb = require('./radius_pb.js');
goog.object.extend(proto, radius_pb);
var planbook_pb = require('./planbook_pb.js');
goog.object.extend(proto, planbook_pb);
goog.exportSymbol('proto.plan.CreatePlanRequest', null, global);
goog.exportSymbol('proto.plan.CreatePlanRequest.PlanParams', null, global);
goog.exportSymbol('proto.plan.CreatePlanResponse', null, global);
goog.exportSymbol('proto.plan.GetPlanRequest', null, global);
goog.exportSymbol('proto.plan.GetPlanResponse', null, global);
goog.exportSymbol('proto.plan.GetPlansRequest', null, global);
goog.exportSymbol('proto.plan.GetPlansResponse', null, global);
goog.exportSymbol('proto.plan.Plan', null, global);
goog.exportSymbol('proto.plan.PlanWithCounts', null, global);
goog.exportSymbol('proto.plan.UpdatePlanRequest', null, global);
goog.exportSymbol('proto.plan.UpdatePlanRequest.PlanParams', null, global);
goog.exportSymbol('proto.plan.UpdatePlanResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plan.CreatePlanRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plan.CreatePlanRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plan.CreatePlanRequest.displayName = 'proto.plan.CreatePlanRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plan.CreatePlanRequest.PlanParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plan.CreatePlanRequest.PlanParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plan.CreatePlanRequest.PlanParams.displayName = 'proto.plan.CreatePlanRequest.PlanParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plan.Plan = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plan.Plan, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plan.Plan.displayName = 'proto.plan.Plan';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plan.PlanWithCounts = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plan.PlanWithCounts, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plan.PlanWithCounts.displayName = 'proto.plan.PlanWithCounts';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plan.CreatePlanResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.plan.CreatePlanResponse.repeatedFields_, null);
};
goog.inherits(proto.plan.CreatePlanResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plan.CreatePlanResponse.displayName = 'proto.plan.CreatePlanResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plan.UpdatePlanRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plan.UpdatePlanRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plan.UpdatePlanRequest.displayName = 'proto.plan.UpdatePlanRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plan.UpdatePlanRequest.PlanParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plan.UpdatePlanRequest.PlanParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plan.UpdatePlanRequest.PlanParams.displayName = 'proto.plan.UpdatePlanRequest.PlanParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plan.UpdatePlanResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.plan.UpdatePlanResponse.repeatedFields_, null);
};
goog.inherits(proto.plan.UpdatePlanResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plan.UpdatePlanResponse.displayName = 'proto.plan.UpdatePlanResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plan.GetPlanRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plan.GetPlanRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plan.GetPlanRequest.displayName = 'proto.plan.GetPlanRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plan.GetPlanResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.plan.GetPlanResponse.repeatedFields_, null);
};
goog.inherits(proto.plan.GetPlanResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plan.GetPlanResponse.displayName = 'proto.plan.GetPlanResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plan.GetPlansRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.plan.GetPlansRequest.repeatedFields_, null);
};
goog.inherits(proto.plan.GetPlansRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plan.GetPlansRequest.displayName = 'proto.plan.GetPlansRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plan.GetPlansResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.plan.GetPlansResponse.repeatedFields_, null);
};
goog.inherits(proto.plan.GetPlansResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plan.GetPlansResponse.displayName = 'proto.plan.GetPlansResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plan.CreatePlanRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.plan.CreatePlanRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plan.CreatePlanRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plan.CreatePlanRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    authContext: (f = msg.getAuthContext()) && common_pb.AuthContext.toObject(includeInstance, f),
    planParams: (f = msg.getPlanParams()) && proto.plan.CreatePlanRequest.PlanParams.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plan.CreatePlanRequest}
 */
proto.plan.CreatePlanRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plan.CreatePlanRequest;
  return proto.plan.CreatePlanRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plan.CreatePlanRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plan.CreatePlanRequest}
 */
proto.plan.CreatePlanRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.AuthContext;
      reader.readMessage(value,common_pb.AuthContext.deserializeBinaryFromReader);
      msg.setAuthContext(value);
      break;
    case 2:
      var value = new proto.plan.CreatePlanRequest.PlanParams;
      reader.readMessage(value,proto.plan.CreatePlanRequest.PlanParams.deserializeBinaryFromReader);
      msg.setPlanParams(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plan.CreatePlanRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plan.CreatePlanRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plan.CreatePlanRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plan.CreatePlanRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAuthContext();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_pb.AuthContext.serializeBinaryToWriter
    );
  }
  f = message.getPlanParams();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.plan.CreatePlanRequest.PlanParams.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plan.CreatePlanRequest.PlanParams.prototype.toObject = function(opt_includeInstance) {
  return proto.plan.CreatePlanRequest.PlanParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plan.CreatePlanRequest.PlanParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plan.CreatePlanRequest.PlanParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    upSpeed: jspb.Message.getFieldWithDefault(msg, 2, 0),
    downSpeed: jspb.Message.getFieldWithDefault(msg, 3, 0),
    upSpeedUnit: jspb.Message.getFieldWithDefault(msg, 4, ""),
    downSpeedUnit: jspb.Message.getFieldWithDefault(msg, 5, ""),
    isPostFup: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    dataLimit: jspb.Message.getFieldWithDefault(msg, 7, ""),
    type: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plan.CreatePlanRequest.PlanParams}
 */
proto.plan.CreatePlanRequest.PlanParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plan.CreatePlanRequest.PlanParams;
  return proto.plan.CreatePlanRequest.PlanParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plan.CreatePlanRequest.PlanParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plan.CreatePlanRequest.PlanParams}
 */
proto.plan.CreatePlanRequest.PlanParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUpSpeed(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDownSpeed(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUpSpeedUnit(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDownSpeedUnit(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsPostFup(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setDataLimit(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plan.CreatePlanRequest.PlanParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plan.CreatePlanRequest.PlanParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plan.CreatePlanRequest.PlanParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plan.CreatePlanRequest.PlanParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUpSpeed();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getDownSpeed();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getUpSpeedUnit();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getDownSpeedUnit();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getIsPostFup();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.plan.CreatePlanRequest.PlanParams.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.plan.CreatePlanRequest.PlanParams} returns this
 */
proto.plan.CreatePlanRequest.PlanParams.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 up_speed = 2;
 * @return {number}
 */
proto.plan.CreatePlanRequest.PlanParams.prototype.getUpSpeed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.plan.CreatePlanRequest.PlanParams} returns this
 */
proto.plan.CreatePlanRequest.PlanParams.prototype.setUpSpeed = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 down_speed = 3;
 * @return {number}
 */
proto.plan.CreatePlanRequest.PlanParams.prototype.getDownSpeed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.plan.CreatePlanRequest.PlanParams} returns this
 */
proto.plan.CreatePlanRequest.PlanParams.prototype.setDownSpeed = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string up_speed_unit = 4;
 * @return {string}
 */
proto.plan.CreatePlanRequest.PlanParams.prototype.getUpSpeedUnit = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.plan.CreatePlanRequest.PlanParams} returns this
 */
proto.plan.CreatePlanRequest.PlanParams.prototype.setUpSpeedUnit = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string down_speed_unit = 5;
 * @return {string}
 */
proto.plan.CreatePlanRequest.PlanParams.prototype.getDownSpeedUnit = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.plan.CreatePlanRequest.PlanParams} returns this
 */
proto.plan.CreatePlanRequest.PlanParams.prototype.setDownSpeedUnit = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional bool is_post_fup = 6;
 * @return {boolean}
 */
proto.plan.CreatePlanRequest.PlanParams.prototype.getIsPostFup = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.plan.CreatePlanRequest.PlanParams} returns this
 */
proto.plan.CreatePlanRequest.PlanParams.prototype.setIsPostFup = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional string data_limit = 7;
 * @return {string}
 */
proto.plan.CreatePlanRequest.PlanParams.prototype.getDataLimit = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.plan.CreatePlanRequest.PlanParams} returns this
 */
proto.plan.CreatePlanRequest.PlanParams.prototype.setDataLimit = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.plan.CreatePlanRequest.PlanParams} returns this
 */
proto.plan.CreatePlanRequest.PlanParams.prototype.clearDataLimit = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plan.CreatePlanRequest.PlanParams.prototype.hasDataLimit = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string type = 8;
 * @return {string}
 */
proto.plan.CreatePlanRequest.PlanParams.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.plan.CreatePlanRequest.PlanParams} returns this
 */
proto.plan.CreatePlanRequest.PlanParams.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional common.AuthContext auth_context = 1;
 * @return {?proto.common.AuthContext}
 */
proto.plan.CreatePlanRequest.prototype.getAuthContext = function() {
  return /** @type{?proto.common.AuthContext} */ (
    jspb.Message.getWrapperField(this, common_pb.AuthContext, 1));
};


/**
 * @param {?proto.common.AuthContext|undefined} value
 * @return {!proto.plan.CreatePlanRequest} returns this
*/
proto.plan.CreatePlanRequest.prototype.setAuthContext = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.plan.CreatePlanRequest} returns this
 */
proto.plan.CreatePlanRequest.prototype.clearAuthContext = function() {
  return this.setAuthContext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plan.CreatePlanRequest.prototype.hasAuthContext = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PlanParams plan_params = 2;
 * @return {?proto.plan.CreatePlanRequest.PlanParams}
 */
proto.plan.CreatePlanRequest.prototype.getPlanParams = function() {
  return /** @type{?proto.plan.CreatePlanRequest.PlanParams} */ (
    jspb.Message.getWrapperField(this, proto.plan.CreatePlanRequest.PlanParams, 2));
};


/**
 * @param {?proto.plan.CreatePlanRequest.PlanParams|undefined} value
 * @return {!proto.plan.CreatePlanRequest} returns this
*/
proto.plan.CreatePlanRequest.prototype.setPlanParams = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.plan.CreatePlanRequest} returns this
 */
proto.plan.CreatePlanRequest.prototype.clearPlanParams = function() {
  return this.setPlanParams(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plan.CreatePlanRequest.prototype.hasPlanParams = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plan.Plan.prototype.toObject = function(opt_includeInstance) {
  return proto.plan.Plan.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plan.Plan} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plan.Plan.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    upSpeed: jspb.Message.getFieldWithDefault(msg, 3, 0),
    downSpeed: jspb.Message.getFieldWithDefault(msg, 4, 0),
    type: jspb.Message.getFieldWithDefault(msg, 5, ""),
    upSpeedUnit: jspb.Message.getFieldWithDefault(msg, 6, ""),
    downSpeedUnit: jspb.Message.getFieldWithDefault(msg, 7, ""),
    isPostFup: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    dataLimit: jspb.Message.getFieldWithDefault(msg, 9, ""),
    tenantId: jspb.Message.getFieldWithDefault(msg, 10, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plan.Plan}
 */
proto.plan.Plan.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plan.Plan;
  return proto.plan.Plan.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plan.Plan} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plan.Plan}
 */
proto.plan.Plan.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUpSpeed(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDownSpeed(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setUpSpeedUnit(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setDownSpeedUnit(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsPostFup(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setDataLimit(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setTenantId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plan.Plan.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plan.Plan.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plan.Plan} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plan.Plan.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUpSpeed();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getDownSpeed();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getUpSpeedUnit();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getDownSpeedUnit();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getIsPostFup();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getTenantId();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.plan.Plan.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.plan.Plan} returns this
 */
proto.plan.Plan.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.plan.Plan.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.plan.Plan} returns this
 */
proto.plan.Plan.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 up_speed = 3;
 * @return {number}
 */
proto.plan.Plan.prototype.getUpSpeed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.plan.Plan} returns this
 */
proto.plan.Plan.prototype.setUpSpeed = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 down_speed = 4;
 * @return {number}
 */
proto.plan.Plan.prototype.getDownSpeed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.plan.Plan} returns this
 */
proto.plan.Plan.prototype.setDownSpeed = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string type = 5;
 * @return {string}
 */
proto.plan.Plan.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.plan.Plan} returns this
 */
proto.plan.Plan.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string up_speed_unit = 6;
 * @return {string}
 */
proto.plan.Plan.prototype.getUpSpeedUnit = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.plan.Plan} returns this
 */
proto.plan.Plan.prototype.setUpSpeedUnit = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string down_speed_unit = 7;
 * @return {string}
 */
proto.plan.Plan.prototype.getDownSpeedUnit = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.plan.Plan} returns this
 */
proto.plan.Plan.prototype.setDownSpeedUnit = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional bool is_post_fup = 8;
 * @return {boolean}
 */
proto.plan.Plan.prototype.getIsPostFup = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.plan.Plan} returns this
 */
proto.plan.Plan.prototype.setIsPostFup = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional string data_limit = 9;
 * @return {string}
 */
proto.plan.Plan.prototype.getDataLimit = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.plan.Plan} returns this
 */
proto.plan.Plan.prototype.setDataLimit = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.plan.Plan} returns this
 */
proto.plan.Plan.prototype.clearDataLimit = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plan.Plan.prototype.hasDataLimit = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional string tenant_id = 10;
 * @return {string}
 */
proto.plan.Plan.prototype.getTenantId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.plan.Plan} returns this
 */
proto.plan.Plan.prototype.setTenantId = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plan.PlanWithCounts.prototype.toObject = function(opt_includeInstance) {
  return proto.plan.PlanWithCounts.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plan.PlanWithCounts} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plan.PlanWithCounts.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    upSpeed: jspb.Message.getFieldWithDefault(msg, 3, 0),
    downSpeed: jspb.Message.getFieldWithDefault(msg, 4, 0),
    type: jspb.Message.getFieldWithDefault(msg, 5, ""),
    upSpeedUnit: jspb.Message.getFieldWithDefault(msg, 6, ""),
    downSpeedUnit: jspb.Message.getFieldWithDefault(msg, 7, ""),
    isPostFup: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    dataLimit: jspb.Message.getFieldWithDefault(msg, 9, ""),
    tenantId: jspb.Message.getFieldWithDefault(msg, 10, ""),
    planbookCount: jspb.Message.getFieldWithDefault(msg, 11, 0),
    customerCount: jspb.Message.getFieldWithDefault(msg, 12, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plan.PlanWithCounts}
 */
proto.plan.PlanWithCounts.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plan.PlanWithCounts;
  return proto.plan.PlanWithCounts.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plan.PlanWithCounts} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plan.PlanWithCounts}
 */
proto.plan.PlanWithCounts.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUpSpeed(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDownSpeed(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setUpSpeedUnit(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setDownSpeedUnit(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsPostFup(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setDataLimit(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setTenantId(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPlanbookCount(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCustomerCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plan.PlanWithCounts.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plan.PlanWithCounts.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plan.PlanWithCounts} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plan.PlanWithCounts.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUpSpeed();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getDownSpeed();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getUpSpeedUnit();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getDownSpeedUnit();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getIsPostFup();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getTenantId();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getPlanbookCount();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = message.getCustomerCount();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.plan.PlanWithCounts.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.plan.PlanWithCounts} returns this
 */
proto.plan.PlanWithCounts.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.plan.PlanWithCounts.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.plan.PlanWithCounts} returns this
 */
proto.plan.PlanWithCounts.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 up_speed = 3;
 * @return {number}
 */
proto.plan.PlanWithCounts.prototype.getUpSpeed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.plan.PlanWithCounts} returns this
 */
proto.plan.PlanWithCounts.prototype.setUpSpeed = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 down_speed = 4;
 * @return {number}
 */
proto.plan.PlanWithCounts.prototype.getDownSpeed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.plan.PlanWithCounts} returns this
 */
proto.plan.PlanWithCounts.prototype.setDownSpeed = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string type = 5;
 * @return {string}
 */
proto.plan.PlanWithCounts.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.plan.PlanWithCounts} returns this
 */
proto.plan.PlanWithCounts.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string up_speed_unit = 6;
 * @return {string}
 */
proto.plan.PlanWithCounts.prototype.getUpSpeedUnit = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.plan.PlanWithCounts} returns this
 */
proto.plan.PlanWithCounts.prototype.setUpSpeedUnit = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string down_speed_unit = 7;
 * @return {string}
 */
proto.plan.PlanWithCounts.prototype.getDownSpeedUnit = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.plan.PlanWithCounts} returns this
 */
proto.plan.PlanWithCounts.prototype.setDownSpeedUnit = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional bool is_post_fup = 8;
 * @return {boolean}
 */
proto.plan.PlanWithCounts.prototype.getIsPostFup = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.plan.PlanWithCounts} returns this
 */
proto.plan.PlanWithCounts.prototype.setIsPostFup = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional string data_limit = 9;
 * @return {string}
 */
proto.plan.PlanWithCounts.prototype.getDataLimit = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.plan.PlanWithCounts} returns this
 */
proto.plan.PlanWithCounts.prototype.setDataLimit = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.plan.PlanWithCounts} returns this
 */
proto.plan.PlanWithCounts.prototype.clearDataLimit = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plan.PlanWithCounts.prototype.hasDataLimit = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional string tenant_id = 10;
 * @return {string}
 */
proto.plan.PlanWithCounts.prototype.getTenantId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.plan.PlanWithCounts} returns this
 */
proto.plan.PlanWithCounts.prototype.setTenantId = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional int32 planbook_count = 11;
 * @return {number}
 */
proto.plan.PlanWithCounts.prototype.getPlanbookCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.plan.PlanWithCounts} returns this
 */
proto.plan.PlanWithCounts.prototype.setPlanbookCount = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional int32 customer_count = 12;
 * @return {number}
 */
proto.plan.PlanWithCounts.prototype.getCustomerCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.plan.PlanWithCounts} returns this
 */
proto.plan.PlanWithCounts.prototype.setCustomerCount = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.plan.CreatePlanResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plan.CreatePlanResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.plan.CreatePlanResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plan.CreatePlanResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plan.CreatePlanResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    plansList: jspb.Message.toObjectList(msg.getPlansList(),
    proto.plan.Plan.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plan.CreatePlanResponse}
 */
proto.plan.CreatePlanResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plan.CreatePlanResponse;
  return proto.plan.CreatePlanResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plan.CreatePlanResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plan.CreatePlanResponse}
 */
proto.plan.CreatePlanResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.plan.Plan;
      reader.readMessage(value,proto.plan.Plan.deserializeBinaryFromReader);
      msg.addPlans(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plan.CreatePlanResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plan.CreatePlanResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plan.CreatePlanResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plan.CreatePlanResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlansList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.plan.Plan.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Plan plans = 1;
 * @return {!Array<!proto.plan.Plan>}
 */
proto.plan.CreatePlanResponse.prototype.getPlansList = function() {
  return /** @type{!Array<!proto.plan.Plan>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.plan.Plan, 1));
};


/**
 * @param {!Array<!proto.plan.Plan>} value
 * @return {!proto.plan.CreatePlanResponse} returns this
*/
proto.plan.CreatePlanResponse.prototype.setPlansList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.plan.Plan=} opt_value
 * @param {number=} opt_index
 * @return {!proto.plan.Plan}
 */
proto.plan.CreatePlanResponse.prototype.addPlans = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.plan.Plan, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.plan.CreatePlanResponse} returns this
 */
proto.plan.CreatePlanResponse.prototype.clearPlansList = function() {
  return this.setPlansList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plan.UpdatePlanRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.plan.UpdatePlanRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plan.UpdatePlanRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plan.UpdatePlanRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    authContext: (f = msg.getAuthContext()) && common_pb.AuthContext.toObject(includeInstance, f),
    planId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    planParams: (f = msg.getPlanParams()) && proto.plan.UpdatePlanRequest.PlanParams.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plan.UpdatePlanRequest}
 */
proto.plan.UpdatePlanRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plan.UpdatePlanRequest;
  return proto.plan.UpdatePlanRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plan.UpdatePlanRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plan.UpdatePlanRequest}
 */
proto.plan.UpdatePlanRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.AuthContext;
      reader.readMessage(value,common_pb.AuthContext.deserializeBinaryFromReader);
      msg.setAuthContext(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlanId(value);
      break;
    case 3:
      var value = new proto.plan.UpdatePlanRequest.PlanParams;
      reader.readMessage(value,proto.plan.UpdatePlanRequest.PlanParams.deserializeBinaryFromReader);
      msg.setPlanParams(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plan.UpdatePlanRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plan.UpdatePlanRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plan.UpdatePlanRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plan.UpdatePlanRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAuthContext();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_pb.AuthContext.serializeBinaryToWriter
    );
  }
  f = message.getPlanId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPlanParams();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.plan.UpdatePlanRequest.PlanParams.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plan.UpdatePlanRequest.PlanParams.prototype.toObject = function(opt_includeInstance) {
  return proto.plan.UpdatePlanRequest.PlanParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plan.UpdatePlanRequest.PlanParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plan.UpdatePlanRequest.PlanParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    upSpeed: jspb.Message.getFieldWithDefault(msg, 2, 0),
    downSpeed: jspb.Message.getFieldWithDefault(msg, 3, 0),
    upSpeedUnit: jspb.Message.getFieldWithDefault(msg, 4, ""),
    downSpeedUnit: jspb.Message.getFieldWithDefault(msg, 5, ""),
    isPostFup: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    dataLimit: jspb.Message.getFieldWithDefault(msg, 7, ""),
    type: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plan.UpdatePlanRequest.PlanParams}
 */
proto.plan.UpdatePlanRequest.PlanParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plan.UpdatePlanRequest.PlanParams;
  return proto.plan.UpdatePlanRequest.PlanParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plan.UpdatePlanRequest.PlanParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plan.UpdatePlanRequest.PlanParams}
 */
proto.plan.UpdatePlanRequest.PlanParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUpSpeed(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDownSpeed(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUpSpeedUnit(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDownSpeedUnit(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsPostFup(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setDataLimit(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plan.UpdatePlanRequest.PlanParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plan.UpdatePlanRequest.PlanParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plan.UpdatePlanRequest.PlanParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plan.UpdatePlanRequest.PlanParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeBool(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeString(
      7,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.plan.UpdatePlanRequest.PlanParams.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.plan.UpdatePlanRequest.PlanParams} returns this
 */
proto.plan.UpdatePlanRequest.PlanParams.prototype.setName = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.plan.UpdatePlanRequest.PlanParams} returns this
 */
proto.plan.UpdatePlanRequest.PlanParams.prototype.clearName = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plan.UpdatePlanRequest.PlanParams.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 up_speed = 2;
 * @return {number}
 */
proto.plan.UpdatePlanRequest.PlanParams.prototype.getUpSpeed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.plan.UpdatePlanRequest.PlanParams} returns this
 */
proto.plan.UpdatePlanRequest.PlanParams.prototype.setUpSpeed = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.plan.UpdatePlanRequest.PlanParams} returns this
 */
proto.plan.UpdatePlanRequest.PlanParams.prototype.clearUpSpeed = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plan.UpdatePlanRequest.PlanParams.prototype.hasUpSpeed = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 down_speed = 3;
 * @return {number}
 */
proto.plan.UpdatePlanRequest.PlanParams.prototype.getDownSpeed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.plan.UpdatePlanRequest.PlanParams} returns this
 */
proto.plan.UpdatePlanRequest.PlanParams.prototype.setDownSpeed = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.plan.UpdatePlanRequest.PlanParams} returns this
 */
proto.plan.UpdatePlanRequest.PlanParams.prototype.clearDownSpeed = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plan.UpdatePlanRequest.PlanParams.prototype.hasDownSpeed = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string up_speed_unit = 4;
 * @return {string}
 */
proto.plan.UpdatePlanRequest.PlanParams.prototype.getUpSpeedUnit = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.plan.UpdatePlanRequest.PlanParams} returns this
 */
proto.plan.UpdatePlanRequest.PlanParams.prototype.setUpSpeedUnit = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.plan.UpdatePlanRequest.PlanParams} returns this
 */
proto.plan.UpdatePlanRequest.PlanParams.prototype.clearUpSpeedUnit = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plan.UpdatePlanRequest.PlanParams.prototype.hasUpSpeedUnit = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string down_speed_unit = 5;
 * @return {string}
 */
proto.plan.UpdatePlanRequest.PlanParams.prototype.getDownSpeedUnit = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.plan.UpdatePlanRequest.PlanParams} returns this
 */
proto.plan.UpdatePlanRequest.PlanParams.prototype.setDownSpeedUnit = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.plan.UpdatePlanRequest.PlanParams} returns this
 */
proto.plan.UpdatePlanRequest.PlanParams.prototype.clearDownSpeedUnit = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plan.UpdatePlanRequest.PlanParams.prototype.hasDownSpeedUnit = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bool is_post_fup = 6;
 * @return {boolean}
 */
proto.plan.UpdatePlanRequest.PlanParams.prototype.getIsPostFup = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.plan.UpdatePlanRequest.PlanParams} returns this
 */
proto.plan.UpdatePlanRequest.PlanParams.prototype.setIsPostFup = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.plan.UpdatePlanRequest.PlanParams} returns this
 */
proto.plan.UpdatePlanRequest.PlanParams.prototype.clearIsPostFup = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plan.UpdatePlanRequest.PlanParams.prototype.hasIsPostFup = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string data_limit = 7;
 * @return {string}
 */
proto.plan.UpdatePlanRequest.PlanParams.prototype.getDataLimit = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.plan.UpdatePlanRequest.PlanParams} returns this
 */
proto.plan.UpdatePlanRequest.PlanParams.prototype.setDataLimit = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.plan.UpdatePlanRequest.PlanParams} returns this
 */
proto.plan.UpdatePlanRequest.PlanParams.prototype.clearDataLimit = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plan.UpdatePlanRequest.PlanParams.prototype.hasDataLimit = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string type = 8;
 * @return {string}
 */
proto.plan.UpdatePlanRequest.PlanParams.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.plan.UpdatePlanRequest.PlanParams} returns this
 */
proto.plan.UpdatePlanRequest.PlanParams.prototype.setType = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.plan.UpdatePlanRequest.PlanParams} returns this
 */
proto.plan.UpdatePlanRequest.PlanParams.prototype.clearType = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plan.UpdatePlanRequest.PlanParams.prototype.hasType = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional common.AuthContext auth_context = 1;
 * @return {?proto.common.AuthContext}
 */
proto.plan.UpdatePlanRequest.prototype.getAuthContext = function() {
  return /** @type{?proto.common.AuthContext} */ (
    jspb.Message.getWrapperField(this, common_pb.AuthContext, 1));
};


/**
 * @param {?proto.common.AuthContext|undefined} value
 * @return {!proto.plan.UpdatePlanRequest} returns this
*/
proto.plan.UpdatePlanRequest.prototype.setAuthContext = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.plan.UpdatePlanRequest} returns this
 */
proto.plan.UpdatePlanRequest.prototype.clearAuthContext = function() {
  return this.setAuthContext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plan.UpdatePlanRequest.prototype.hasAuthContext = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string plan_id = 2;
 * @return {string}
 */
proto.plan.UpdatePlanRequest.prototype.getPlanId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.plan.UpdatePlanRequest} returns this
 */
proto.plan.UpdatePlanRequest.prototype.setPlanId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional PlanParams plan_params = 3;
 * @return {?proto.plan.UpdatePlanRequest.PlanParams}
 */
proto.plan.UpdatePlanRequest.prototype.getPlanParams = function() {
  return /** @type{?proto.plan.UpdatePlanRequest.PlanParams} */ (
    jspb.Message.getWrapperField(this, proto.plan.UpdatePlanRequest.PlanParams, 3));
};


/**
 * @param {?proto.plan.UpdatePlanRequest.PlanParams|undefined} value
 * @return {!proto.plan.UpdatePlanRequest} returns this
*/
proto.plan.UpdatePlanRequest.prototype.setPlanParams = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.plan.UpdatePlanRequest} returns this
 */
proto.plan.UpdatePlanRequest.prototype.clearPlanParams = function() {
  return this.setPlanParams(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plan.UpdatePlanRequest.prototype.hasPlanParams = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.plan.UpdatePlanResponse.repeatedFields_ = [1,2,3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plan.UpdatePlanResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.plan.UpdatePlanResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plan.UpdatePlanResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plan.UpdatePlanResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    updatedPlanList: jspb.Message.toObjectList(msg.getUpdatedPlanList(),
    proto.plan.Plan.toObject, includeInstance),
    updatedPlanbookList: jspb.Message.toObjectList(msg.getUpdatedPlanbookList(),
    planbook_pb.Planbook.toObject, includeInstance),
    updatedRadgroupreplyList: jspb.Message.toObjectList(msg.getUpdatedRadgroupreplyList(),
    radius_pb.Radgroupreply.toObject, includeInstance),
    updatedRadusergroupList: jspb.Message.toObjectList(msg.getUpdatedRadusergroupList(),
    radius_pb.Radusergroup.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plan.UpdatePlanResponse}
 */
proto.plan.UpdatePlanResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plan.UpdatePlanResponse;
  return proto.plan.UpdatePlanResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plan.UpdatePlanResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plan.UpdatePlanResponse}
 */
proto.plan.UpdatePlanResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.plan.Plan;
      reader.readMessage(value,proto.plan.Plan.deserializeBinaryFromReader);
      msg.addUpdatedPlan(value);
      break;
    case 2:
      var value = new planbook_pb.Planbook;
      reader.readMessage(value,planbook_pb.Planbook.deserializeBinaryFromReader);
      msg.addUpdatedPlanbook(value);
      break;
    case 3:
      var value = new radius_pb.Radgroupreply;
      reader.readMessage(value,radius_pb.Radgroupreply.deserializeBinaryFromReader);
      msg.addUpdatedRadgroupreply(value);
      break;
    case 4:
      var value = new radius_pb.Radusergroup;
      reader.readMessage(value,radius_pb.Radusergroup.deserializeBinaryFromReader);
      msg.addUpdatedRadusergroup(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plan.UpdatePlanResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plan.UpdatePlanResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plan.UpdatePlanResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plan.UpdatePlanResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUpdatedPlanList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.plan.Plan.serializeBinaryToWriter
    );
  }
  f = message.getUpdatedPlanbookList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      planbook_pb.Planbook.serializeBinaryToWriter
    );
  }
  f = message.getUpdatedRadgroupreplyList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      radius_pb.Radgroupreply.serializeBinaryToWriter
    );
  }
  f = message.getUpdatedRadusergroupList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      radius_pb.Radusergroup.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Plan updated_plan = 1;
 * @return {!Array<!proto.plan.Plan>}
 */
proto.plan.UpdatePlanResponse.prototype.getUpdatedPlanList = function() {
  return /** @type{!Array<!proto.plan.Plan>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.plan.Plan, 1));
};


/**
 * @param {!Array<!proto.plan.Plan>} value
 * @return {!proto.plan.UpdatePlanResponse} returns this
*/
proto.plan.UpdatePlanResponse.prototype.setUpdatedPlanList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.plan.Plan=} opt_value
 * @param {number=} opt_index
 * @return {!proto.plan.Plan}
 */
proto.plan.UpdatePlanResponse.prototype.addUpdatedPlan = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.plan.Plan, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.plan.UpdatePlanResponse} returns this
 */
proto.plan.UpdatePlanResponse.prototype.clearUpdatedPlanList = function() {
  return this.setUpdatedPlanList([]);
};


/**
 * repeated planbook.Planbook updated_planbook = 2;
 * @return {!Array<!proto.planbook.Planbook>}
 */
proto.plan.UpdatePlanResponse.prototype.getUpdatedPlanbookList = function() {
  return /** @type{!Array<!proto.planbook.Planbook>} */ (
    jspb.Message.getRepeatedWrapperField(this, planbook_pb.Planbook, 2));
};


/**
 * @param {!Array<!proto.planbook.Planbook>} value
 * @return {!proto.plan.UpdatePlanResponse} returns this
*/
proto.plan.UpdatePlanResponse.prototype.setUpdatedPlanbookList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.planbook.Planbook=} opt_value
 * @param {number=} opt_index
 * @return {!proto.planbook.Planbook}
 */
proto.plan.UpdatePlanResponse.prototype.addUpdatedPlanbook = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.planbook.Planbook, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.plan.UpdatePlanResponse} returns this
 */
proto.plan.UpdatePlanResponse.prototype.clearUpdatedPlanbookList = function() {
  return this.setUpdatedPlanbookList([]);
};


/**
 * repeated radius.Radgroupreply updated_radgroupreply = 3;
 * @return {!Array<!proto.radius.Radgroupreply>}
 */
proto.plan.UpdatePlanResponse.prototype.getUpdatedRadgroupreplyList = function() {
  return /** @type{!Array<!proto.radius.Radgroupreply>} */ (
    jspb.Message.getRepeatedWrapperField(this, radius_pb.Radgroupreply, 3));
};


/**
 * @param {!Array<!proto.radius.Radgroupreply>} value
 * @return {!proto.plan.UpdatePlanResponse} returns this
*/
proto.plan.UpdatePlanResponse.prototype.setUpdatedRadgroupreplyList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.radius.Radgroupreply=} opt_value
 * @param {number=} opt_index
 * @return {!proto.radius.Radgroupreply}
 */
proto.plan.UpdatePlanResponse.prototype.addUpdatedRadgroupreply = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.radius.Radgroupreply, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.plan.UpdatePlanResponse} returns this
 */
proto.plan.UpdatePlanResponse.prototype.clearUpdatedRadgroupreplyList = function() {
  return this.setUpdatedRadgroupreplyList([]);
};


/**
 * repeated radius.Radusergroup updated_radusergroup = 4;
 * @return {!Array<!proto.radius.Radusergroup>}
 */
proto.plan.UpdatePlanResponse.prototype.getUpdatedRadusergroupList = function() {
  return /** @type{!Array<!proto.radius.Radusergroup>} */ (
    jspb.Message.getRepeatedWrapperField(this, radius_pb.Radusergroup, 4));
};


/**
 * @param {!Array<!proto.radius.Radusergroup>} value
 * @return {!proto.plan.UpdatePlanResponse} returns this
*/
proto.plan.UpdatePlanResponse.prototype.setUpdatedRadusergroupList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.radius.Radusergroup=} opt_value
 * @param {number=} opt_index
 * @return {!proto.radius.Radusergroup}
 */
proto.plan.UpdatePlanResponse.prototype.addUpdatedRadusergroup = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.radius.Radusergroup, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.plan.UpdatePlanResponse} returns this
 */
proto.plan.UpdatePlanResponse.prototype.clearUpdatedRadusergroupList = function() {
  return this.setUpdatedRadusergroupList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plan.GetPlanRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.plan.GetPlanRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plan.GetPlanRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plan.GetPlanRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    authContext: (f = msg.getAuthContext()) && common_pb.AuthContext.toObject(includeInstance, f),
    planId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plan.GetPlanRequest}
 */
proto.plan.GetPlanRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plan.GetPlanRequest;
  return proto.plan.GetPlanRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plan.GetPlanRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plan.GetPlanRequest}
 */
proto.plan.GetPlanRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.AuthContext;
      reader.readMessage(value,common_pb.AuthContext.deserializeBinaryFromReader);
      msg.setAuthContext(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlanId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plan.GetPlanRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plan.GetPlanRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plan.GetPlanRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plan.GetPlanRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAuthContext();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_pb.AuthContext.serializeBinaryToWriter
    );
  }
  f = message.getPlanId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional common.AuthContext auth_context = 1;
 * @return {?proto.common.AuthContext}
 */
proto.plan.GetPlanRequest.prototype.getAuthContext = function() {
  return /** @type{?proto.common.AuthContext} */ (
    jspb.Message.getWrapperField(this, common_pb.AuthContext, 1));
};


/**
 * @param {?proto.common.AuthContext|undefined} value
 * @return {!proto.plan.GetPlanRequest} returns this
*/
proto.plan.GetPlanRequest.prototype.setAuthContext = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.plan.GetPlanRequest} returns this
 */
proto.plan.GetPlanRequest.prototype.clearAuthContext = function() {
  return this.setAuthContext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plan.GetPlanRequest.prototype.hasAuthContext = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string plan_id = 2;
 * @return {string}
 */
proto.plan.GetPlanRequest.prototype.getPlanId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.plan.GetPlanRequest} returns this
 */
proto.plan.GetPlanRequest.prototype.setPlanId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.plan.GetPlanResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plan.GetPlanResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.plan.GetPlanResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plan.GetPlanResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plan.GetPlanResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    plansList: jspb.Message.toObjectList(msg.getPlansList(),
    proto.plan.Plan.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plan.GetPlanResponse}
 */
proto.plan.GetPlanResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plan.GetPlanResponse;
  return proto.plan.GetPlanResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plan.GetPlanResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plan.GetPlanResponse}
 */
proto.plan.GetPlanResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.plan.Plan;
      reader.readMessage(value,proto.plan.Plan.deserializeBinaryFromReader);
      msg.addPlans(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plan.GetPlanResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plan.GetPlanResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plan.GetPlanResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plan.GetPlanResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlansList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.plan.Plan.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Plan plans = 1;
 * @return {!Array<!proto.plan.Plan>}
 */
proto.plan.GetPlanResponse.prototype.getPlansList = function() {
  return /** @type{!Array<!proto.plan.Plan>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.plan.Plan, 1));
};


/**
 * @param {!Array<!proto.plan.Plan>} value
 * @return {!proto.plan.GetPlanResponse} returns this
*/
proto.plan.GetPlanResponse.prototype.setPlansList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.plan.Plan=} opt_value
 * @param {number=} opt_index
 * @return {!proto.plan.Plan}
 */
proto.plan.GetPlanResponse.prototype.addPlans = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.plan.Plan, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.plan.GetPlanResponse} returns this
 */
proto.plan.GetPlanResponse.prototype.clearPlansList = function() {
  return this.setPlansList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.plan.GetPlansRequest.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plan.GetPlansRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.plan.GetPlansRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plan.GetPlansRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plan.GetPlansRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    authContext: (f = msg.getAuthContext()) && common_pb.AuthContext.toObject(includeInstance, f),
    limit: jspb.Message.getFieldWithDefault(msg, 2, 0),
    offset: jspb.Message.getFieldWithDefault(msg, 3, 0),
    search: jspb.Message.getFieldWithDefault(msg, 4, ""),
    typesList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plan.GetPlansRequest}
 */
proto.plan.GetPlansRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plan.GetPlansRequest;
  return proto.plan.GetPlansRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plan.GetPlansRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plan.GetPlansRequest}
 */
proto.plan.GetPlansRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.AuthContext;
      reader.readMessage(value,common_pb.AuthContext.deserializeBinaryFromReader);
      msg.setAuthContext(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLimit(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOffset(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSearch(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addTypes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plan.GetPlansRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plan.GetPlansRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plan.GetPlansRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plan.GetPlansRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAuthContext();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_pb.AuthContext.serializeBinaryToWriter
    );
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getOffset();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getSearch();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getTypesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
};


/**
 * optional common.AuthContext auth_context = 1;
 * @return {?proto.common.AuthContext}
 */
proto.plan.GetPlansRequest.prototype.getAuthContext = function() {
  return /** @type{?proto.common.AuthContext} */ (
    jspb.Message.getWrapperField(this, common_pb.AuthContext, 1));
};


/**
 * @param {?proto.common.AuthContext|undefined} value
 * @return {!proto.plan.GetPlansRequest} returns this
*/
proto.plan.GetPlansRequest.prototype.setAuthContext = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.plan.GetPlansRequest} returns this
 */
proto.plan.GetPlansRequest.prototype.clearAuthContext = function() {
  return this.setAuthContext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plan.GetPlansRequest.prototype.hasAuthContext = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 limit = 2;
 * @return {number}
 */
proto.plan.GetPlansRequest.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.plan.GetPlansRequest} returns this
 */
proto.plan.GetPlansRequest.prototype.setLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 offset = 3;
 * @return {number}
 */
proto.plan.GetPlansRequest.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.plan.GetPlansRequest} returns this
 */
proto.plan.GetPlansRequest.prototype.setOffset = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string search = 4;
 * @return {string}
 */
proto.plan.GetPlansRequest.prototype.getSearch = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.plan.GetPlansRequest} returns this
 */
proto.plan.GetPlansRequest.prototype.setSearch = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated string types = 5;
 * @return {!Array<string>}
 */
proto.plan.GetPlansRequest.prototype.getTypesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.plan.GetPlansRequest} returns this
 */
proto.plan.GetPlansRequest.prototype.setTypesList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.plan.GetPlansRequest} returns this
 */
proto.plan.GetPlansRequest.prototype.addTypes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.plan.GetPlansRequest} returns this
 */
proto.plan.GetPlansRequest.prototype.clearTypesList = function() {
  return this.setTypesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.plan.GetPlansResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plan.GetPlansResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.plan.GetPlansResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plan.GetPlansResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plan.GetPlansResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    plansList: jspb.Message.toObjectList(msg.getPlansList(),
    proto.plan.PlanWithCounts.toObject, includeInstance),
    meta: (f = msg.getMeta()) && common_pb.PaginationMeta.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plan.GetPlansResponse}
 */
proto.plan.GetPlansResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plan.GetPlansResponse;
  return proto.plan.GetPlansResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plan.GetPlansResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plan.GetPlansResponse}
 */
proto.plan.GetPlansResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.plan.PlanWithCounts;
      reader.readMessage(value,proto.plan.PlanWithCounts.deserializeBinaryFromReader);
      msg.addPlans(value);
      break;
    case 2:
      var value = new common_pb.PaginationMeta;
      reader.readMessage(value,common_pb.PaginationMeta.deserializeBinaryFromReader);
      msg.setMeta(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plan.GetPlansResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plan.GetPlansResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plan.GetPlansResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plan.GetPlansResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlansList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.plan.PlanWithCounts.serializeBinaryToWriter
    );
  }
  f = message.getMeta();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.PaginationMeta.serializeBinaryToWriter
    );
  }
};


/**
 * repeated PlanWithCounts plans = 1;
 * @return {!Array<!proto.plan.PlanWithCounts>}
 */
proto.plan.GetPlansResponse.prototype.getPlansList = function() {
  return /** @type{!Array<!proto.plan.PlanWithCounts>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.plan.PlanWithCounts, 1));
};


/**
 * @param {!Array<!proto.plan.PlanWithCounts>} value
 * @return {!proto.plan.GetPlansResponse} returns this
*/
proto.plan.GetPlansResponse.prototype.setPlansList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.plan.PlanWithCounts=} opt_value
 * @param {number=} opt_index
 * @return {!proto.plan.PlanWithCounts}
 */
proto.plan.GetPlansResponse.prototype.addPlans = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.plan.PlanWithCounts, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.plan.GetPlansResponse} returns this
 */
proto.plan.GetPlansResponse.prototype.clearPlansList = function() {
  return this.setPlansList([]);
};


/**
 * optional common.PaginationMeta meta = 2;
 * @return {?proto.common.PaginationMeta}
 */
proto.plan.GetPlansResponse.prototype.getMeta = function() {
  return /** @type{?proto.common.PaginationMeta} */ (
    jspb.Message.getWrapperField(this, common_pb.PaginationMeta, 2));
};


/**
 * @param {?proto.common.PaginationMeta|undefined} value
 * @return {!proto.plan.GetPlansResponse} returns this
*/
proto.plan.GetPlansResponse.prototype.setMeta = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.plan.GetPlansResponse} returns this
 */
proto.plan.GetPlansResponse.prototype.clearMeta = function() {
  return this.setMeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plan.GetPlansResponse.prototype.hasMeta = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.plan);

// source: planbook.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var common_pb = require('./common_pb.js');
goog.object.extend(proto, common_pb);
var radius_pb = require('./radius_pb.js');
goog.object.extend(proto, radius_pb);
goog.exportSymbol('proto.planbook.BusinessPlanbookForPlan', null, global);
goog.exportSymbol('proto.planbook.CreatePlanbookRequest', null, global);
goog.exportSymbol('proto.planbook.CreatePlanbookRequest.PlanbookParams', null, global);
goog.exportSymbol('proto.planbook.CreatePlanbookResponse', null, global);
goog.exportSymbol('proto.planbook.GetBusinessesPlanbookForPlanRequest', null, global);
goog.exportSymbol('proto.planbook.GetBusinessesPlanbookForPlanResponse', null, global);
goog.exportSymbol('proto.planbook.GetPlanbookRequest', null, global);
goog.exportSymbol('proto.planbook.GetPlanbookResponse', null, global);
goog.exportSymbol('proto.planbook.GetPlanbooksRequest', null, global);
goog.exportSymbol('proto.planbook.GetPlanbooksResponse', null, global);
goog.exportSymbol('proto.planbook.GetPlansPlanbookForBusinessRequest', null, global);
goog.exportSymbol('proto.planbook.GetPlansPlanbookForBusinessResponse', null, global);
goog.exportSymbol('proto.planbook.Planbook', null, global);
goog.exportSymbol('proto.planbook.PlanbookDetails', null, global);
goog.exportSymbol('proto.planbook.PlansPlanbookForBusiness', null, global);
goog.exportSymbol('proto.planbook.UpdatePlanbookRequest', null, global);
goog.exportSymbol('proto.planbook.UpdatePlanbookRequest.PlanbookParams', null, global);
goog.exportSymbol('proto.planbook.UpdatePlanbookResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.planbook.Planbook = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.planbook.Planbook, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.planbook.Planbook.displayName = 'proto.planbook.Planbook';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.planbook.PlanbookDetails = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.planbook.PlanbookDetails, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.planbook.PlanbookDetails.displayName = 'proto.planbook.PlanbookDetails';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.planbook.CreatePlanbookRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.planbook.CreatePlanbookRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.planbook.CreatePlanbookRequest.displayName = 'proto.planbook.CreatePlanbookRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.planbook.CreatePlanbookRequest.PlanbookParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.planbook.CreatePlanbookRequest.PlanbookParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.planbook.CreatePlanbookRequest.PlanbookParams.displayName = 'proto.planbook.CreatePlanbookRequest.PlanbookParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.planbook.CreatePlanbookResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.planbook.CreatePlanbookResponse.repeatedFields_, null);
};
goog.inherits(proto.planbook.CreatePlanbookResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.planbook.CreatePlanbookResponse.displayName = 'proto.planbook.CreatePlanbookResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.planbook.UpdatePlanbookRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.planbook.UpdatePlanbookRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.planbook.UpdatePlanbookRequest.displayName = 'proto.planbook.UpdatePlanbookRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.planbook.UpdatePlanbookRequest.PlanbookParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.planbook.UpdatePlanbookRequest.PlanbookParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.planbook.UpdatePlanbookRequest.PlanbookParams.displayName = 'proto.planbook.UpdatePlanbookRequest.PlanbookParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.planbook.UpdatePlanbookResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.planbook.UpdatePlanbookResponse.repeatedFields_, null);
};
goog.inherits(proto.planbook.UpdatePlanbookResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.planbook.UpdatePlanbookResponse.displayName = 'proto.planbook.UpdatePlanbookResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.planbook.GetPlanbookRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.planbook.GetPlanbookRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.planbook.GetPlanbookRequest.displayName = 'proto.planbook.GetPlanbookRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.planbook.GetPlanbookResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.planbook.GetPlanbookResponse.repeatedFields_, null);
};
goog.inherits(proto.planbook.GetPlanbookResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.planbook.GetPlanbookResponse.displayName = 'proto.planbook.GetPlanbookResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.planbook.GetPlanbooksRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.planbook.GetPlanbooksRequest.repeatedFields_, null);
};
goog.inherits(proto.planbook.GetPlanbooksRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.planbook.GetPlanbooksRequest.displayName = 'proto.planbook.GetPlanbooksRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.planbook.GetPlanbooksResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.planbook.GetPlanbooksResponse.repeatedFields_, null);
};
goog.inherits(proto.planbook.GetPlanbooksResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.planbook.GetPlanbooksResponse.displayName = 'proto.planbook.GetPlanbooksResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.planbook.BusinessPlanbookForPlan = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.planbook.BusinessPlanbookForPlan, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.planbook.BusinessPlanbookForPlan.displayName = 'proto.planbook.BusinessPlanbookForPlan';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.planbook.GetBusinessesPlanbookForPlanRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.planbook.GetBusinessesPlanbookForPlanRequest.repeatedFields_, null);
};
goog.inherits(proto.planbook.GetBusinessesPlanbookForPlanRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.planbook.GetBusinessesPlanbookForPlanRequest.displayName = 'proto.planbook.GetBusinessesPlanbookForPlanRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.planbook.GetBusinessesPlanbookForPlanResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.planbook.GetBusinessesPlanbookForPlanResponse.repeatedFields_, null);
};
goog.inherits(proto.planbook.GetBusinessesPlanbookForPlanResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.planbook.GetBusinessesPlanbookForPlanResponse.displayName = 'proto.planbook.GetBusinessesPlanbookForPlanResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.planbook.PlansPlanbookForBusiness = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.planbook.PlansPlanbookForBusiness, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.planbook.PlansPlanbookForBusiness.displayName = 'proto.planbook.PlansPlanbookForBusiness';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.planbook.GetPlansPlanbookForBusinessRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.planbook.GetPlansPlanbookForBusinessRequest.repeatedFields_, null);
};
goog.inherits(proto.planbook.GetPlansPlanbookForBusinessRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.planbook.GetPlansPlanbookForBusinessRequest.displayName = 'proto.planbook.GetPlansPlanbookForBusinessRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.planbook.GetPlansPlanbookForBusinessResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.planbook.GetPlansPlanbookForBusinessResponse.repeatedFields_, null);
};
goog.inherits(proto.planbook.GetPlansPlanbookForBusinessResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.planbook.GetPlansPlanbookForBusinessResponse.displayName = 'proto.planbook.GetPlansPlanbookForBusinessResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.planbook.Planbook.prototype.toObject = function(opt_includeInstance) {
  return proto.planbook.Planbook.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.planbook.Planbook} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.planbook.Planbook.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    planId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    businessId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    period: jspb.Message.getFieldWithDefault(msg, 4, ""),
    price: jspb.Message.getFieldWithDefault(msg, 5, ""),
    groupname: jspb.Message.getFieldWithDefault(msg, 6, ""),
    billingType: jspb.Message.getFieldWithDefault(msg, 7, ""),
    tenantId: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.planbook.Planbook}
 */
proto.planbook.Planbook.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.planbook.Planbook;
  return proto.planbook.Planbook.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.planbook.Planbook} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.planbook.Planbook}
 */
proto.planbook.Planbook.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlanId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setBusinessId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPeriod(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrice(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupname(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setBillingType(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setTenantId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.planbook.Planbook.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.planbook.Planbook.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.planbook.Planbook} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.planbook.Planbook.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPlanId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getBusinessId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPeriod();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getPrice();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getGroupname();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getBillingType();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getTenantId();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.planbook.Planbook.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.planbook.Planbook} returns this
 */
proto.planbook.Planbook.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string plan_id = 2;
 * @return {string}
 */
proto.planbook.Planbook.prototype.getPlanId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.planbook.Planbook} returns this
 */
proto.planbook.Planbook.prototype.setPlanId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string business_id = 3;
 * @return {string}
 */
proto.planbook.Planbook.prototype.getBusinessId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.planbook.Planbook} returns this
 */
proto.planbook.Planbook.prototype.setBusinessId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string period = 4;
 * @return {string}
 */
proto.planbook.Planbook.prototype.getPeriod = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.planbook.Planbook} returns this
 */
proto.planbook.Planbook.prototype.setPeriod = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string price = 5;
 * @return {string}
 */
proto.planbook.Planbook.prototype.getPrice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.planbook.Planbook} returns this
 */
proto.planbook.Planbook.prototype.setPrice = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string groupname = 6;
 * @return {string}
 */
proto.planbook.Planbook.prototype.getGroupname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.planbook.Planbook} returns this
 */
proto.planbook.Planbook.prototype.setGroupname = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string billing_type = 7;
 * @return {string}
 */
proto.planbook.Planbook.prototype.getBillingType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.planbook.Planbook} returns this
 */
proto.planbook.Planbook.prototype.setBillingType = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string tenant_id = 8;
 * @return {string}
 */
proto.planbook.Planbook.prototype.getTenantId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.planbook.Planbook} returns this
 */
proto.planbook.Planbook.prototype.setTenantId = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.planbook.PlanbookDetails.prototype.toObject = function(opt_includeInstance) {
  return proto.planbook.PlanbookDetails.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.planbook.PlanbookDetails} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.planbook.PlanbookDetails.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    planId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    planName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    planType: jspb.Message.getFieldWithDefault(msg, 4, ""),
    planUpspeed: jspb.Message.getFieldWithDefault(msg, 5, ""),
    planDownspeed: jspb.Message.getFieldWithDefault(msg, 6, ""),
    planUpspeedUnit: jspb.Message.getFieldWithDefault(msg, 7, ""),
    planDownspeedUnit: jspb.Message.getFieldWithDefault(msg, 8, ""),
    businessId: jspb.Message.getFieldWithDefault(msg, 9, ""),
    businessName: jspb.Message.getFieldWithDefault(msg, 10, ""),
    period: jspb.Message.getFieldWithDefault(msg, 11, ""),
    price: jspb.Message.getFieldWithDefault(msg, 12, ""),
    groupname: jspb.Message.getFieldWithDefault(msg, 13, ""),
    billingType: jspb.Message.getFieldWithDefault(msg, 14, ""),
    tenantId: jspb.Message.getFieldWithDefault(msg, 15, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.planbook.PlanbookDetails}
 */
proto.planbook.PlanbookDetails.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.planbook.PlanbookDetails;
  return proto.planbook.PlanbookDetails.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.planbook.PlanbookDetails} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.planbook.PlanbookDetails}
 */
proto.planbook.PlanbookDetails.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlanId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlanName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlanType(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlanUpspeed(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlanDownspeed(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlanUpspeedUnit(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlanDownspeedUnit(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setBusinessId(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setBusinessName(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setPeriod(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrice(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupname(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setBillingType(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setTenantId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.planbook.PlanbookDetails.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.planbook.PlanbookDetails.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.planbook.PlanbookDetails} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.planbook.PlanbookDetails.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPlanId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPlanName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPlanType();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getPlanUpspeed();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getPlanDownspeed();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getPlanUpspeedUnit();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getPlanDownspeedUnit();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getBusinessId();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getBusinessName();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getPeriod();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getPrice();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getGroupname();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getBillingType();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = message.getTenantId();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.planbook.PlanbookDetails.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.planbook.PlanbookDetails} returns this
 */
proto.planbook.PlanbookDetails.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string plan_id = 2;
 * @return {string}
 */
proto.planbook.PlanbookDetails.prototype.getPlanId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.planbook.PlanbookDetails} returns this
 */
proto.planbook.PlanbookDetails.prototype.setPlanId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string plan_name = 3;
 * @return {string}
 */
proto.planbook.PlanbookDetails.prototype.getPlanName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.planbook.PlanbookDetails} returns this
 */
proto.planbook.PlanbookDetails.prototype.setPlanName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string plan_type = 4;
 * @return {string}
 */
proto.planbook.PlanbookDetails.prototype.getPlanType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.planbook.PlanbookDetails} returns this
 */
proto.planbook.PlanbookDetails.prototype.setPlanType = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string plan_upspeed = 5;
 * @return {string}
 */
proto.planbook.PlanbookDetails.prototype.getPlanUpspeed = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.planbook.PlanbookDetails} returns this
 */
proto.planbook.PlanbookDetails.prototype.setPlanUpspeed = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string plan_downspeed = 6;
 * @return {string}
 */
proto.planbook.PlanbookDetails.prototype.getPlanDownspeed = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.planbook.PlanbookDetails} returns this
 */
proto.planbook.PlanbookDetails.prototype.setPlanDownspeed = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string plan_upspeed_unit = 7;
 * @return {string}
 */
proto.planbook.PlanbookDetails.prototype.getPlanUpspeedUnit = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.planbook.PlanbookDetails} returns this
 */
proto.planbook.PlanbookDetails.prototype.setPlanUpspeedUnit = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string plan_downspeed_unit = 8;
 * @return {string}
 */
proto.planbook.PlanbookDetails.prototype.getPlanDownspeedUnit = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.planbook.PlanbookDetails} returns this
 */
proto.planbook.PlanbookDetails.prototype.setPlanDownspeedUnit = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string business_id = 9;
 * @return {string}
 */
proto.planbook.PlanbookDetails.prototype.getBusinessId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.planbook.PlanbookDetails} returns this
 */
proto.planbook.PlanbookDetails.prototype.setBusinessId = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string business_name = 10;
 * @return {string}
 */
proto.planbook.PlanbookDetails.prototype.getBusinessName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.planbook.PlanbookDetails} returns this
 */
proto.planbook.PlanbookDetails.prototype.setBusinessName = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string period = 11;
 * @return {string}
 */
proto.planbook.PlanbookDetails.prototype.getPeriod = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.planbook.PlanbookDetails} returns this
 */
proto.planbook.PlanbookDetails.prototype.setPeriod = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string price = 12;
 * @return {string}
 */
proto.planbook.PlanbookDetails.prototype.getPrice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.planbook.PlanbookDetails} returns this
 */
proto.planbook.PlanbookDetails.prototype.setPrice = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional string groupname = 13;
 * @return {string}
 */
proto.planbook.PlanbookDetails.prototype.getGroupname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.planbook.PlanbookDetails} returns this
 */
proto.planbook.PlanbookDetails.prototype.setGroupname = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional string billing_type = 14;
 * @return {string}
 */
proto.planbook.PlanbookDetails.prototype.getBillingType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * @param {string} value
 * @return {!proto.planbook.PlanbookDetails} returns this
 */
proto.planbook.PlanbookDetails.prototype.setBillingType = function(value) {
  return jspb.Message.setProto3StringField(this, 14, value);
};


/**
 * optional string tenant_id = 15;
 * @return {string}
 */
proto.planbook.PlanbookDetails.prototype.getTenantId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/**
 * @param {string} value
 * @return {!proto.planbook.PlanbookDetails} returns this
 */
proto.planbook.PlanbookDetails.prototype.setTenantId = function(value) {
  return jspb.Message.setProto3StringField(this, 15, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.planbook.CreatePlanbookRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.planbook.CreatePlanbookRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.planbook.CreatePlanbookRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.planbook.CreatePlanbookRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    authContext: (f = msg.getAuthContext()) && common_pb.AuthContext.toObject(includeInstance, f),
    planbookParams: (f = msg.getPlanbookParams()) && proto.planbook.CreatePlanbookRequest.PlanbookParams.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.planbook.CreatePlanbookRequest}
 */
proto.planbook.CreatePlanbookRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.planbook.CreatePlanbookRequest;
  return proto.planbook.CreatePlanbookRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.planbook.CreatePlanbookRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.planbook.CreatePlanbookRequest}
 */
proto.planbook.CreatePlanbookRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.AuthContext;
      reader.readMessage(value,common_pb.AuthContext.deserializeBinaryFromReader);
      msg.setAuthContext(value);
      break;
    case 2:
      var value = new proto.planbook.CreatePlanbookRequest.PlanbookParams;
      reader.readMessage(value,proto.planbook.CreatePlanbookRequest.PlanbookParams.deserializeBinaryFromReader);
      msg.setPlanbookParams(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.planbook.CreatePlanbookRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.planbook.CreatePlanbookRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.planbook.CreatePlanbookRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.planbook.CreatePlanbookRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAuthContext();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_pb.AuthContext.serializeBinaryToWriter
    );
  }
  f = message.getPlanbookParams();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.planbook.CreatePlanbookRequest.PlanbookParams.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.planbook.CreatePlanbookRequest.PlanbookParams.prototype.toObject = function(opt_includeInstance) {
  return proto.planbook.CreatePlanbookRequest.PlanbookParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.planbook.CreatePlanbookRequest.PlanbookParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.planbook.CreatePlanbookRequest.PlanbookParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    planId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    billingType: jspb.Message.getFieldWithDefault(msg, 2, ""),
    businessId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    price: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    period: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.planbook.CreatePlanbookRequest.PlanbookParams}
 */
proto.planbook.CreatePlanbookRequest.PlanbookParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.planbook.CreatePlanbookRequest.PlanbookParams;
  return proto.planbook.CreatePlanbookRequest.PlanbookParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.planbook.CreatePlanbookRequest.PlanbookParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.planbook.CreatePlanbookRequest.PlanbookParams}
 */
proto.planbook.CreatePlanbookRequest.PlanbookParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlanId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBillingType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setBusinessId(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPrice(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setPeriod(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.planbook.CreatePlanbookRequest.PlanbookParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.planbook.CreatePlanbookRequest.PlanbookParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.planbook.CreatePlanbookRequest.PlanbookParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.planbook.CreatePlanbookRequest.PlanbookParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlanId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBillingType();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string plan_id = 1;
 * @return {string}
 */
proto.planbook.CreatePlanbookRequest.PlanbookParams.prototype.getPlanId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.planbook.CreatePlanbookRequest.PlanbookParams} returns this
 */
proto.planbook.CreatePlanbookRequest.PlanbookParams.prototype.setPlanId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string billing_type = 2;
 * @return {string}
 */
proto.planbook.CreatePlanbookRequest.PlanbookParams.prototype.getBillingType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.planbook.CreatePlanbookRequest.PlanbookParams} returns this
 */
proto.planbook.CreatePlanbookRequest.PlanbookParams.prototype.setBillingType = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string business_id = 3;
 * @return {string}
 */
proto.planbook.CreatePlanbookRequest.PlanbookParams.prototype.getBusinessId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.planbook.CreatePlanbookRequest.PlanbookParams} returns this
 */
proto.planbook.CreatePlanbookRequest.PlanbookParams.prototype.setBusinessId = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.planbook.CreatePlanbookRequest.PlanbookParams} returns this
 */
proto.planbook.CreatePlanbookRequest.PlanbookParams.prototype.clearBusinessId = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.planbook.CreatePlanbookRequest.PlanbookParams.prototype.hasBusinessId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double price = 4;
 * @return {number}
 */
proto.planbook.CreatePlanbookRequest.PlanbookParams.prototype.getPrice = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.planbook.CreatePlanbookRequest.PlanbookParams} returns this
 */
proto.planbook.CreatePlanbookRequest.PlanbookParams.prototype.setPrice = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.planbook.CreatePlanbookRequest.PlanbookParams} returns this
 */
proto.planbook.CreatePlanbookRequest.PlanbookParams.prototype.clearPrice = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.planbook.CreatePlanbookRequest.PlanbookParams.prototype.hasPrice = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string period = 5;
 * @return {string}
 */
proto.planbook.CreatePlanbookRequest.PlanbookParams.prototype.getPeriod = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.planbook.CreatePlanbookRequest.PlanbookParams} returns this
 */
proto.planbook.CreatePlanbookRequest.PlanbookParams.prototype.setPeriod = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.planbook.CreatePlanbookRequest.PlanbookParams} returns this
 */
proto.planbook.CreatePlanbookRequest.PlanbookParams.prototype.clearPeriod = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.planbook.CreatePlanbookRequest.PlanbookParams.prototype.hasPeriod = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional common.AuthContext auth_context = 1;
 * @return {?proto.common.AuthContext}
 */
proto.planbook.CreatePlanbookRequest.prototype.getAuthContext = function() {
  return /** @type{?proto.common.AuthContext} */ (
    jspb.Message.getWrapperField(this, common_pb.AuthContext, 1));
};


/**
 * @param {?proto.common.AuthContext|undefined} value
 * @return {!proto.planbook.CreatePlanbookRequest} returns this
*/
proto.planbook.CreatePlanbookRequest.prototype.setAuthContext = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.planbook.CreatePlanbookRequest} returns this
 */
proto.planbook.CreatePlanbookRequest.prototype.clearAuthContext = function() {
  return this.setAuthContext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.planbook.CreatePlanbookRequest.prototype.hasAuthContext = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PlanbookParams planbook_params = 2;
 * @return {?proto.planbook.CreatePlanbookRequest.PlanbookParams}
 */
proto.planbook.CreatePlanbookRequest.prototype.getPlanbookParams = function() {
  return /** @type{?proto.planbook.CreatePlanbookRequest.PlanbookParams} */ (
    jspb.Message.getWrapperField(this, proto.planbook.CreatePlanbookRequest.PlanbookParams, 2));
};


/**
 * @param {?proto.planbook.CreatePlanbookRequest.PlanbookParams|undefined} value
 * @return {!proto.planbook.CreatePlanbookRequest} returns this
*/
proto.planbook.CreatePlanbookRequest.prototype.setPlanbookParams = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.planbook.CreatePlanbookRequest} returns this
 */
proto.planbook.CreatePlanbookRequest.prototype.clearPlanbookParams = function() {
  return this.setPlanbookParams(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.planbook.CreatePlanbookRequest.prototype.hasPlanbookParams = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.planbook.CreatePlanbookResponse.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.planbook.CreatePlanbookResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.planbook.CreatePlanbookResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.planbook.CreatePlanbookResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.planbook.CreatePlanbookResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    planbooksList: jspb.Message.toObjectList(msg.getPlanbooksList(),
    proto.planbook.Planbook.toObject, includeInstance),
    radgroupreplyEntryList: jspb.Message.toObjectList(msg.getRadgroupreplyEntryList(),
    radius_pb.Radgroupreply.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.planbook.CreatePlanbookResponse}
 */
proto.planbook.CreatePlanbookResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.planbook.CreatePlanbookResponse;
  return proto.planbook.CreatePlanbookResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.planbook.CreatePlanbookResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.planbook.CreatePlanbookResponse}
 */
proto.planbook.CreatePlanbookResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.planbook.Planbook;
      reader.readMessage(value,proto.planbook.Planbook.deserializeBinaryFromReader);
      msg.addPlanbooks(value);
      break;
    case 2:
      var value = new radius_pb.Radgroupreply;
      reader.readMessage(value,radius_pb.Radgroupreply.deserializeBinaryFromReader);
      msg.addRadgroupreplyEntry(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.planbook.CreatePlanbookResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.planbook.CreatePlanbookResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.planbook.CreatePlanbookResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.planbook.CreatePlanbookResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlanbooksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.planbook.Planbook.serializeBinaryToWriter
    );
  }
  f = message.getRadgroupreplyEntryList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      radius_pb.Radgroupreply.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Planbook planbooks = 1;
 * @return {!Array<!proto.planbook.Planbook>}
 */
proto.planbook.CreatePlanbookResponse.prototype.getPlanbooksList = function() {
  return /** @type{!Array<!proto.planbook.Planbook>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.planbook.Planbook, 1));
};


/**
 * @param {!Array<!proto.planbook.Planbook>} value
 * @return {!proto.planbook.CreatePlanbookResponse} returns this
*/
proto.planbook.CreatePlanbookResponse.prototype.setPlanbooksList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.planbook.Planbook=} opt_value
 * @param {number=} opt_index
 * @return {!proto.planbook.Planbook}
 */
proto.planbook.CreatePlanbookResponse.prototype.addPlanbooks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.planbook.Planbook, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.planbook.CreatePlanbookResponse} returns this
 */
proto.planbook.CreatePlanbookResponse.prototype.clearPlanbooksList = function() {
  return this.setPlanbooksList([]);
};


/**
 * repeated radius.Radgroupreply radgroupreply_entry = 2;
 * @return {!Array<!proto.radius.Radgroupreply>}
 */
proto.planbook.CreatePlanbookResponse.prototype.getRadgroupreplyEntryList = function() {
  return /** @type{!Array<!proto.radius.Radgroupreply>} */ (
    jspb.Message.getRepeatedWrapperField(this, radius_pb.Radgroupreply, 2));
};


/**
 * @param {!Array<!proto.radius.Radgroupreply>} value
 * @return {!proto.planbook.CreatePlanbookResponse} returns this
*/
proto.planbook.CreatePlanbookResponse.prototype.setRadgroupreplyEntryList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.radius.Radgroupreply=} opt_value
 * @param {number=} opt_index
 * @return {!proto.radius.Radgroupreply}
 */
proto.planbook.CreatePlanbookResponse.prototype.addRadgroupreplyEntry = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.radius.Radgroupreply, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.planbook.CreatePlanbookResponse} returns this
 */
proto.planbook.CreatePlanbookResponse.prototype.clearRadgroupreplyEntryList = function() {
  return this.setRadgroupreplyEntryList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.planbook.UpdatePlanbookRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.planbook.UpdatePlanbookRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.planbook.UpdatePlanbookRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.planbook.UpdatePlanbookRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    authContext: (f = msg.getAuthContext()) && common_pb.AuthContext.toObject(includeInstance, f),
    planbookId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    planbookParams: (f = msg.getPlanbookParams()) && proto.planbook.UpdatePlanbookRequest.PlanbookParams.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.planbook.UpdatePlanbookRequest}
 */
proto.planbook.UpdatePlanbookRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.planbook.UpdatePlanbookRequest;
  return proto.planbook.UpdatePlanbookRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.planbook.UpdatePlanbookRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.planbook.UpdatePlanbookRequest}
 */
proto.planbook.UpdatePlanbookRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.AuthContext;
      reader.readMessage(value,common_pb.AuthContext.deserializeBinaryFromReader);
      msg.setAuthContext(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlanbookId(value);
      break;
    case 3:
      var value = new proto.planbook.UpdatePlanbookRequest.PlanbookParams;
      reader.readMessage(value,proto.planbook.UpdatePlanbookRequest.PlanbookParams.deserializeBinaryFromReader);
      msg.setPlanbookParams(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.planbook.UpdatePlanbookRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.planbook.UpdatePlanbookRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.planbook.UpdatePlanbookRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.planbook.UpdatePlanbookRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAuthContext();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_pb.AuthContext.serializeBinaryToWriter
    );
  }
  f = message.getPlanbookId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPlanbookParams();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.planbook.UpdatePlanbookRequest.PlanbookParams.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.planbook.UpdatePlanbookRequest.PlanbookParams.prototype.toObject = function(opt_includeInstance) {
  return proto.planbook.UpdatePlanbookRequest.PlanbookParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.planbook.UpdatePlanbookRequest.PlanbookParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.planbook.UpdatePlanbookRequest.PlanbookParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    price: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    period: jspb.Message.getFieldWithDefault(msg, 2, ""),
    billingType: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.planbook.UpdatePlanbookRequest.PlanbookParams}
 */
proto.planbook.UpdatePlanbookRequest.PlanbookParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.planbook.UpdatePlanbookRequest.PlanbookParams;
  return proto.planbook.UpdatePlanbookRequest.PlanbookParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.planbook.UpdatePlanbookRequest.PlanbookParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.planbook.UpdatePlanbookRequest.PlanbookParams}
 */
proto.planbook.UpdatePlanbookRequest.PlanbookParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPrice(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPeriod(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setBillingType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.planbook.UpdatePlanbookRequest.PlanbookParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.planbook.UpdatePlanbookRequest.PlanbookParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.planbook.UpdatePlanbookRequest.PlanbookParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.planbook.UpdatePlanbookRequest.PlanbookParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional double price = 1;
 * @return {number}
 */
proto.planbook.UpdatePlanbookRequest.PlanbookParams.prototype.getPrice = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.planbook.UpdatePlanbookRequest.PlanbookParams} returns this
 */
proto.planbook.UpdatePlanbookRequest.PlanbookParams.prototype.setPrice = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.planbook.UpdatePlanbookRequest.PlanbookParams} returns this
 */
proto.planbook.UpdatePlanbookRequest.PlanbookParams.prototype.clearPrice = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.planbook.UpdatePlanbookRequest.PlanbookParams.prototype.hasPrice = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string period = 2;
 * @return {string}
 */
proto.planbook.UpdatePlanbookRequest.PlanbookParams.prototype.getPeriod = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.planbook.UpdatePlanbookRequest.PlanbookParams} returns this
 */
proto.planbook.UpdatePlanbookRequest.PlanbookParams.prototype.setPeriod = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.planbook.UpdatePlanbookRequest.PlanbookParams} returns this
 */
proto.planbook.UpdatePlanbookRequest.PlanbookParams.prototype.clearPeriod = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.planbook.UpdatePlanbookRequest.PlanbookParams.prototype.hasPeriod = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string billing_type = 3;
 * @return {string}
 */
proto.planbook.UpdatePlanbookRequest.PlanbookParams.prototype.getBillingType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.planbook.UpdatePlanbookRequest.PlanbookParams} returns this
 */
proto.planbook.UpdatePlanbookRequest.PlanbookParams.prototype.setBillingType = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.planbook.UpdatePlanbookRequest.PlanbookParams} returns this
 */
proto.planbook.UpdatePlanbookRequest.PlanbookParams.prototype.clearBillingType = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.planbook.UpdatePlanbookRequest.PlanbookParams.prototype.hasBillingType = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional common.AuthContext auth_context = 1;
 * @return {?proto.common.AuthContext}
 */
proto.planbook.UpdatePlanbookRequest.prototype.getAuthContext = function() {
  return /** @type{?proto.common.AuthContext} */ (
    jspb.Message.getWrapperField(this, common_pb.AuthContext, 1));
};


/**
 * @param {?proto.common.AuthContext|undefined} value
 * @return {!proto.planbook.UpdatePlanbookRequest} returns this
*/
proto.planbook.UpdatePlanbookRequest.prototype.setAuthContext = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.planbook.UpdatePlanbookRequest} returns this
 */
proto.planbook.UpdatePlanbookRequest.prototype.clearAuthContext = function() {
  return this.setAuthContext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.planbook.UpdatePlanbookRequest.prototype.hasAuthContext = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string planbook_id = 2;
 * @return {string}
 */
proto.planbook.UpdatePlanbookRequest.prototype.getPlanbookId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.planbook.UpdatePlanbookRequest} returns this
 */
proto.planbook.UpdatePlanbookRequest.prototype.setPlanbookId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional PlanbookParams planbook_params = 3;
 * @return {?proto.planbook.UpdatePlanbookRequest.PlanbookParams}
 */
proto.planbook.UpdatePlanbookRequest.prototype.getPlanbookParams = function() {
  return /** @type{?proto.planbook.UpdatePlanbookRequest.PlanbookParams} */ (
    jspb.Message.getWrapperField(this, proto.planbook.UpdatePlanbookRequest.PlanbookParams, 3));
};


/**
 * @param {?proto.planbook.UpdatePlanbookRequest.PlanbookParams|undefined} value
 * @return {!proto.planbook.UpdatePlanbookRequest} returns this
*/
proto.planbook.UpdatePlanbookRequest.prototype.setPlanbookParams = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.planbook.UpdatePlanbookRequest} returns this
 */
proto.planbook.UpdatePlanbookRequest.prototype.clearPlanbookParams = function() {
  return this.setPlanbookParams(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.planbook.UpdatePlanbookRequest.prototype.hasPlanbookParams = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.planbook.UpdatePlanbookResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.planbook.UpdatePlanbookResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.planbook.UpdatePlanbookResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.planbook.UpdatePlanbookResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.planbook.UpdatePlanbookResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    planbooksList: jspb.Message.toObjectList(msg.getPlanbooksList(),
    proto.planbook.Planbook.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.planbook.UpdatePlanbookResponse}
 */
proto.planbook.UpdatePlanbookResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.planbook.UpdatePlanbookResponse;
  return proto.planbook.UpdatePlanbookResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.planbook.UpdatePlanbookResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.planbook.UpdatePlanbookResponse}
 */
proto.planbook.UpdatePlanbookResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.planbook.Planbook;
      reader.readMessage(value,proto.planbook.Planbook.deserializeBinaryFromReader);
      msg.addPlanbooks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.planbook.UpdatePlanbookResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.planbook.UpdatePlanbookResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.planbook.UpdatePlanbookResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.planbook.UpdatePlanbookResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlanbooksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.planbook.Planbook.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Planbook planbooks = 1;
 * @return {!Array<!proto.planbook.Planbook>}
 */
proto.planbook.UpdatePlanbookResponse.prototype.getPlanbooksList = function() {
  return /** @type{!Array<!proto.planbook.Planbook>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.planbook.Planbook, 1));
};


/**
 * @param {!Array<!proto.planbook.Planbook>} value
 * @return {!proto.planbook.UpdatePlanbookResponse} returns this
*/
proto.planbook.UpdatePlanbookResponse.prototype.setPlanbooksList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.planbook.Planbook=} opt_value
 * @param {number=} opt_index
 * @return {!proto.planbook.Planbook}
 */
proto.planbook.UpdatePlanbookResponse.prototype.addPlanbooks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.planbook.Planbook, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.planbook.UpdatePlanbookResponse} returns this
 */
proto.planbook.UpdatePlanbookResponse.prototype.clearPlanbooksList = function() {
  return this.setPlanbooksList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.planbook.GetPlanbookRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.planbook.GetPlanbookRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.planbook.GetPlanbookRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.planbook.GetPlanbookRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    authContext: (f = msg.getAuthContext()) && common_pb.AuthContext.toObject(includeInstance, f),
    planbookId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.planbook.GetPlanbookRequest}
 */
proto.planbook.GetPlanbookRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.planbook.GetPlanbookRequest;
  return proto.planbook.GetPlanbookRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.planbook.GetPlanbookRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.planbook.GetPlanbookRequest}
 */
proto.planbook.GetPlanbookRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.AuthContext;
      reader.readMessage(value,common_pb.AuthContext.deserializeBinaryFromReader);
      msg.setAuthContext(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlanbookId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.planbook.GetPlanbookRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.planbook.GetPlanbookRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.planbook.GetPlanbookRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.planbook.GetPlanbookRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAuthContext();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_pb.AuthContext.serializeBinaryToWriter
    );
  }
  f = message.getPlanbookId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional common.AuthContext auth_context = 1;
 * @return {?proto.common.AuthContext}
 */
proto.planbook.GetPlanbookRequest.prototype.getAuthContext = function() {
  return /** @type{?proto.common.AuthContext} */ (
    jspb.Message.getWrapperField(this, common_pb.AuthContext, 1));
};


/**
 * @param {?proto.common.AuthContext|undefined} value
 * @return {!proto.planbook.GetPlanbookRequest} returns this
*/
proto.planbook.GetPlanbookRequest.prototype.setAuthContext = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.planbook.GetPlanbookRequest} returns this
 */
proto.planbook.GetPlanbookRequest.prototype.clearAuthContext = function() {
  return this.setAuthContext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.planbook.GetPlanbookRequest.prototype.hasAuthContext = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string planbook_id = 2;
 * @return {string}
 */
proto.planbook.GetPlanbookRequest.prototype.getPlanbookId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.planbook.GetPlanbookRequest} returns this
 */
proto.planbook.GetPlanbookRequest.prototype.setPlanbookId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.planbook.GetPlanbookResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.planbook.GetPlanbookResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.planbook.GetPlanbookResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.planbook.GetPlanbookResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.planbook.GetPlanbookResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    planbooksList: jspb.Message.toObjectList(msg.getPlanbooksList(),
    proto.planbook.Planbook.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.planbook.GetPlanbookResponse}
 */
proto.planbook.GetPlanbookResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.planbook.GetPlanbookResponse;
  return proto.planbook.GetPlanbookResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.planbook.GetPlanbookResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.planbook.GetPlanbookResponse}
 */
proto.planbook.GetPlanbookResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.planbook.Planbook;
      reader.readMessage(value,proto.planbook.Planbook.deserializeBinaryFromReader);
      msg.addPlanbooks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.planbook.GetPlanbookResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.planbook.GetPlanbookResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.planbook.GetPlanbookResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.planbook.GetPlanbookResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlanbooksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.planbook.Planbook.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Planbook planbooks = 1;
 * @return {!Array<!proto.planbook.Planbook>}
 */
proto.planbook.GetPlanbookResponse.prototype.getPlanbooksList = function() {
  return /** @type{!Array<!proto.planbook.Planbook>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.planbook.Planbook, 1));
};


/**
 * @param {!Array<!proto.planbook.Planbook>} value
 * @return {!proto.planbook.GetPlanbookResponse} returns this
*/
proto.planbook.GetPlanbookResponse.prototype.setPlanbooksList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.planbook.Planbook=} opt_value
 * @param {number=} opt_index
 * @return {!proto.planbook.Planbook}
 */
proto.planbook.GetPlanbookResponse.prototype.addPlanbooks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.planbook.Planbook, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.planbook.GetPlanbookResponse} returns this
 */
proto.planbook.GetPlanbookResponse.prototype.clearPlanbooksList = function() {
  return this.setPlanbooksList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.planbook.GetPlanbooksRequest.repeatedFields_ = [5,6,7,8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.planbook.GetPlanbooksRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.planbook.GetPlanbooksRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.planbook.GetPlanbooksRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.planbook.GetPlanbooksRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    authContext: (f = msg.getAuthContext()) && common_pb.AuthContext.toObject(includeInstance, f),
    limit: jspb.Message.getFieldWithDefault(msg, 2, 0),
    offset: jspb.Message.getFieldWithDefault(msg, 3, 0),
    search: jspb.Message.getFieldWithDefault(msg, 4, ""),
    planTypesList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f,
    businessIdsList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f,
    planIdsList: (f = jspb.Message.getRepeatedField(msg, 7)) == null ? undefined : f,
    billingTypesList: (f = jspb.Message.getRepeatedField(msg, 8)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.planbook.GetPlanbooksRequest}
 */
proto.planbook.GetPlanbooksRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.planbook.GetPlanbooksRequest;
  return proto.planbook.GetPlanbooksRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.planbook.GetPlanbooksRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.planbook.GetPlanbooksRequest}
 */
proto.planbook.GetPlanbooksRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.AuthContext;
      reader.readMessage(value,common_pb.AuthContext.deserializeBinaryFromReader);
      msg.setAuthContext(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLimit(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOffset(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSearch(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addPlanTypes(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.addBusinessIds(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.addPlanIds(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.addBillingTypes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.planbook.GetPlanbooksRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.planbook.GetPlanbooksRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.planbook.GetPlanbooksRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.planbook.GetPlanbooksRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAuthContext();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_pb.AuthContext.serializeBinaryToWriter
    );
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getOffset();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getPlanTypesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
  f = message.getBusinessIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      6,
      f
    );
  }
  f = message.getPlanIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      7,
      f
    );
  }
  f = message.getBillingTypesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      8,
      f
    );
  }
};


/**
 * optional common.AuthContext auth_context = 1;
 * @return {?proto.common.AuthContext}
 */
proto.planbook.GetPlanbooksRequest.prototype.getAuthContext = function() {
  return /** @type{?proto.common.AuthContext} */ (
    jspb.Message.getWrapperField(this, common_pb.AuthContext, 1));
};


/**
 * @param {?proto.common.AuthContext|undefined} value
 * @return {!proto.planbook.GetPlanbooksRequest} returns this
*/
proto.planbook.GetPlanbooksRequest.prototype.setAuthContext = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.planbook.GetPlanbooksRequest} returns this
 */
proto.planbook.GetPlanbooksRequest.prototype.clearAuthContext = function() {
  return this.setAuthContext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.planbook.GetPlanbooksRequest.prototype.hasAuthContext = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 limit = 2;
 * @return {number}
 */
proto.planbook.GetPlanbooksRequest.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.planbook.GetPlanbooksRequest} returns this
 */
proto.planbook.GetPlanbooksRequest.prototype.setLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 offset = 3;
 * @return {number}
 */
proto.planbook.GetPlanbooksRequest.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.planbook.GetPlanbooksRequest} returns this
 */
proto.planbook.GetPlanbooksRequest.prototype.setOffset = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string search = 4;
 * @return {string}
 */
proto.planbook.GetPlanbooksRequest.prototype.getSearch = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.planbook.GetPlanbooksRequest} returns this
 */
proto.planbook.GetPlanbooksRequest.prototype.setSearch = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.planbook.GetPlanbooksRequest} returns this
 */
proto.planbook.GetPlanbooksRequest.prototype.clearSearch = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.planbook.GetPlanbooksRequest.prototype.hasSearch = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated string plan_types = 5;
 * @return {!Array<string>}
 */
proto.planbook.GetPlanbooksRequest.prototype.getPlanTypesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.planbook.GetPlanbooksRequest} returns this
 */
proto.planbook.GetPlanbooksRequest.prototype.setPlanTypesList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.planbook.GetPlanbooksRequest} returns this
 */
proto.planbook.GetPlanbooksRequest.prototype.addPlanTypes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.planbook.GetPlanbooksRequest} returns this
 */
proto.planbook.GetPlanbooksRequest.prototype.clearPlanTypesList = function() {
  return this.setPlanTypesList([]);
};


/**
 * repeated string business_ids = 6;
 * @return {!Array<string>}
 */
proto.planbook.GetPlanbooksRequest.prototype.getBusinessIdsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 6));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.planbook.GetPlanbooksRequest} returns this
 */
proto.planbook.GetPlanbooksRequest.prototype.setBusinessIdsList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.planbook.GetPlanbooksRequest} returns this
 */
proto.planbook.GetPlanbooksRequest.prototype.addBusinessIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.planbook.GetPlanbooksRequest} returns this
 */
proto.planbook.GetPlanbooksRequest.prototype.clearBusinessIdsList = function() {
  return this.setBusinessIdsList([]);
};


/**
 * repeated string plan_ids = 7;
 * @return {!Array<string>}
 */
proto.planbook.GetPlanbooksRequest.prototype.getPlanIdsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 7));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.planbook.GetPlanbooksRequest} returns this
 */
proto.planbook.GetPlanbooksRequest.prototype.setPlanIdsList = function(value) {
  return jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.planbook.GetPlanbooksRequest} returns this
 */
proto.planbook.GetPlanbooksRequest.prototype.addPlanIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.planbook.GetPlanbooksRequest} returns this
 */
proto.planbook.GetPlanbooksRequest.prototype.clearPlanIdsList = function() {
  return this.setPlanIdsList([]);
};


/**
 * repeated string billing_types = 8;
 * @return {!Array<string>}
 */
proto.planbook.GetPlanbooksRequest.prototype.getBillingTypesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 8));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.planbook.GetPlanbooksRequest} returns this
 */
proto.planbook.GetPlanbooksRequest.prototype.setBillingTypesList = function(value) {
  return jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.planbook.GetPlanbooksRequest} returns this
 */
proto.planbook.GetPlanbooksRequest.prototype.addBillingTypes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.planbook.GetPlanbooksRequest} returns this
 */
proto.planbook.GetPlanbooksRequest.prototype.clearBillingTypesList = function() {
  return this.setBillingTypesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.planbook.GetPlanbooksResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.planbook.GetPlanbooksResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.planbook.GetPlanbooksResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.planbook.GetPlanbooksResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.planbook.GetPlanbooksResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    planbooksList: jspb.Message.toObjectList(msg.getPlanbooksList(),
    proto.planbook.PlanbookDetails.toObject, includeInstance),
    meta: (f = msg.getMeta()) && common_pb.PaginationMeta.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.planbook.GetPlanbooksResponse}
 */
proto.planbook.GetPlanbooksResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.planbook.GetPlanbooksResponse;
  return proto.planbook.GetPlanbooksResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.planbook.GetPlanbooksResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.planbook.GetPlanbooksResponse}
 */
proto.planbook.GetPlanbooksResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.planbook.PlanbookDetails;
      reader.readMessage(value,proto.planbook.PlanbookDetails.deserializeBinaryFromReader);
      msg.addPlanbooks(value);
      break;
    case 2:
      var value = new common_pb.PaginationMeta;
      reader.readMessage(value,common_pb.PaginationMeta.deserializeBinaryFromReader);
      msg.setMeta(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.planbook.GetPlanbooksResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.planbook.GetPlanbooksResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.planbook.GetPlanbooksResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.planbook.GetPlanbooksResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlanbooksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.planbook.PlanbookDetails.serializeBinaryToWriter
    );
  }
  f = message.getMeta();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.PaginationMeta.serializeBinaryToWriter
    );
  }
};


/**
 * repeated PlanbookDetails planbooks = 1;
 * @return {!Array<!proto.planbook.PlanbookDetails>}
 */
proto.planbook.GetPlanbooksResponse.prototype.getPlanbooksList = function() {
  return /** @type{!Array<!proto.planbook.PlanbookDetails>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.planbook.PlanbookDetails, 1));
};


/**
 * @param {!Array<!proto.planbook.PlanbookDetails>} value
 * @return {!proto.planbook.GetPlanbooksResponse} returns this
*/
proto.planbook.GetPlanbooksResponse.prototype.setPlanbooksList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.planbook.PlanbookDetails=} opt_value
 * @param {number=} opt_index
 * @return {!proto.planbook.PlanbookDetails}
 */
proto.planbook.GetPlanbooksResponse.prototype.addPlanbooks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.planbook.PlanbookDetails, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.planbook.GetPlanbooksResponse} returns this
 */
proto.planbook.GetPlanbooksResponse.prototype.clearPlanbooksList = function() {
  return this.setPlanbooksList([]);
};


/**
 * optional common.PaginationMeta meta = 2;
 * @return {?proto.common.PaginationMeta}
 */
proto.planbook.GetPlanbooksResponse.prototype.getMeta = function() {
  return /** @type{?proto.common.PaginationMeta} */ (
    jspb.Message.getWrapperField(this, common_pb.PaginationMeta, 2));
};


/**
 * @param {?proto.common.PaginationMeta|undefined} value
 * @return {!proto.planbook.GetPlanbooksResponse} returns this
*/
proto.planbook.GetPlanbooksResponse.prototype.setMeta = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.planbook.GetPlanbooksResponse} returns this
 */
proto.planbook.GetPlanbooksResponse.prototype.clearMeta = function() {
  return this.setMeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.planbook.GetPlanbooksResponse.prototype.hasMeta = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.planbook.BusinessPlanbookForPlan.prototype.toObject = function(opt_includeInstance) {
  return proto.planbook.BusinessPlanbookForPlan.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.planbook.BusinessPlanbookForPlan} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.planbook.BusinessPlanbookForPlan.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    type: jspb.Message.getFieldWithDefault(msg, 3, ""),
    billingType: jspb.Message.getFieldWithDefault(msg, 4, ""),
    customerCount: jspb.Message.getFieldWithDefault(msg, 5, 0),
    price: jspb.Message.getFieldWithDefault(msg, 6, ""),
    period: jspb.Message.getFieldWithDefault(msg, 7, ""),
    tenantId: jspb.Message.getFieldWithDefault(msg, 8, ""),
    businessId: jspb.Message.getFieldWithDefault(msg, 9, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.planbook.BusinessPlanbookForPlan}
 */
proto.planbook.BusinessPlanbookForPlan.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.planbook.BusinessPlanbookForPlan;
  return proto.planbook.BusinessPlanbookForPlan.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.planbook.BusinessPlanbookForPlan} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.planbook.BusinessPlanbookForPlan}
 */
proto.planbook.BusinessPlanbookForPlan.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setBillingType(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCustomerCount(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrice(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setPeriod(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setTenantId(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setBusinessId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.planbook.BusinessPlanbookForPlan.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.planbook.BusinessPlanbookForPlan.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.planbook.BusinessPlanbookForPlan} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.planbook.BusinessPlanbookForPlan.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getBillingType();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCustomerCount();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getPrice();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getPeriod();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getTenantId();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getBusinessId();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.planbook.BusinessPlanbookForPlan.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.planbook.BusinessPlanbookForPlan} returns this
 */
proto.planbook.BusinessPlanbookForPlan.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.planbook.BusinessPlanbookForPlan.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.planbook.BusinessPlanbookForPlan} returns this
 */
proto.planbook.BusinessPlanbookForPlan.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string type = 3;
 * @return {string}
 */
proto.planbook.BusinessPlanbookForPlan.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.planbook.BusinessPlanbookForPlan} returns this
 */
proto.planbook.BusinessPlanbookForPlan.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string billing_type = 4;
 * @return {string}
 */
proto.planbook.BusinessPlanbookForPlan.prototype.getBillingType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.planbook.BusinessPlanbookForPlan} returns this
 */
proto.planbook.BusinessPlanbookForPlan.prototype.setBillingType = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int32 customer_count = 5;
 * @return {number}
 */
proto.planbook.BusinessPlanbookForPlan.prototype.getCustomerCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.planbook.BusinessPlanbookForPlan} returns this
 */
proto.planbook.BusinessPlanbookForPlan.prototype.setCustomerCount = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string price = 6;
 * @return {string}
 */
proto.planbook.BusinessPlanbookForPlan.prototype.getPrice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.planbook.BusinessPlanbookForPlan} returns this
 */
proto.planbook.BusinessPlanbookForPlan.prototype.setPrice = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string period = 7;
 * @return {string}
 */
proto.planbook.BusinessPlanbookForPlan.prototype.getPeriod = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.planbook.BusinessPlanbookForPlan} returns this
 */
proto.planbook.BusinessPlanbookForPlan.prototype.setPeriod = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string tenant_id = 8;
 * @return {string}
 */
proto.planbook.BusinessPlanbookForPlan.prototype.getTenantId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.planbook.BusinessPlanbookForPlan} returns this
 */
proto.planbook.BusinessPlanbookForPlan.prototype.setTenantId = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string business_id = 9;
 * @return {string}
 */
proto.planbook.BusinessPlanbookForPlan.prototype.getBusinessId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.planbook.BusinessPlanbookForPlan} returns this
 */
proto.planbook.BusinessPlanbookForPlan.prototype.setBusinessId = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.planbook.GetBusinessesPlanbookForPlanRequest.repeatedFields_ = [6,7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.planbook.GetBusinessesPlanbookForPlanRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.planbook.GetBusinessesPlanbookForPlanRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.planbook.GetBusinessesPlanbookForPlanRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.planbook.GetBusinessesPlanbookForPlanRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    authContext: (f = msg.getAuthContext()) && common_pb.AuthContext.toObject(includeInstance, f),
    planId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    limit: jspb.Message.getFieldWithDefault(msg, 3, 0),
    offset: jspb.Message.getFieldWithDefault(msg, 4, 0),
    search: jspb.Message.getFieldWithDefault(msg, 5, ""),
    typeList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f,
    billingTypeList: (f = jspb.Message.getRepeatedField(msg, 7)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.planbook.GetBusinessesPlanbookForPlanRequest}
 */
proto.planbook.GetBusinessesPlanbookForPlanRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.planbook.GetBusinessesPlanbookForPlanRequest;
  return proto.planbook.GetBusinessesPlanbookForPlanRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.planbook.GetBusinessesPlanbookForPlanRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.planbook.GetBusinessesPlanbookForPlanRequest}
 */
proto.planbook.GetBusinessesPlanbookForPlanRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.AuthContext;
      reader.readMessage(value,common_pb.AuthContext.deserializeBinaryFromReader);
      msg.setAuthContext(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlanId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLimit(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOffset(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSearch(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.addType(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.addBillingType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.planbook.GetBusinessesPlanbookForPlanRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.planbook.GetBusinessesPlanbookForPlanRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.planbook.GetBusinessesPlanbookForPlanRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.planbook.GetBusinessesPlanbookForPlanRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAuthContext();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_pb.AuthContext.serializeBinaryToWriter
    );
  }
  f = message.getPlanId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getOffset();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getTypeList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      6,
      f
    );
  }
  f = message.getBillingTypeList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      7,
      f
    );
  }
};


/**
 * optional common.AuthContext auth_context = 1;
 * @return {?proto.common.AuthContext}
 */
proto.planbook.GetBusinessesPlanbookForPlanRequest.prototype.getAuthContext = function() {
  return /** @type{?proto.common.AuthContext} */ (
    jspb.Message.getWrapperField(this, common_pb.AuthContext, 1));
};


/**
 * @param {?proto.common.AuthContext|undefined} value
 * @return {!proto.planbook.GetBusinessesPlanbookForPlanRequest} returns this
*/
proto.planbook.GetBusinessesPlanbookForPlanRequest.prototype.setAuthContext = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.planbook.GetBusinessesPlanbookForPlanRequest} returns this
 */
proto.planbook.GetBusinessesPlanbookForPlanRequest.prototype.clearAuthContext = function() {
  return this.setAuthContext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.planbook.GetBusinessesPlanbookForPlanRequest.prototype.hasAuthContext = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string plan_id = 2;
 * @return {string}
 */
proto.planbook.GetBusinessesPlanbookForPlanRequest.prototype.getPlanId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.planbook.GetBusinessesPlanbookForPlanRequest} returns this
 */
proto.planbook.GetBusinessesPlanbookForPlanRequest.prototype.setPlanId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 limit = 3;
 * @return {number}
 */
proto.planbook.GetBusinessesPlanbookForPlanRequest.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.planbook.GetBusinessesPlanbookForPlanRequest} returns this
 */
proto.planbook.GetBusinessesPlanbookForPlanRequest.prototype.setLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 offset = 4;
 * @return {number}
 */
proto.planbook.GetBusinessesPlanbookForPlanRequest.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.planbook.GetBusinessesPlanbookForPlanRequest} returns this
 */
proto.planbook.GetBusinessesPlanbookForPlanRequest.prototype.setOffset = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string search = 5;
 * @return {string}
 */
proto.planbook.GetBusinessesPlanbookForPlanRequest.prototype.getSearch = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.planbook.GetBusinessesPlanbookForPlanRequest} returns this
 */
proto.planbook.GetBusinessesPlanbookForPlanRequest.prototype.setSearch = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.planbook.GetBusinessesPlanbookForPlanRequest} returns this
 */
proto.planbook.GetBusinessesPlanbookForPlanRequest.prototype.clearSearch = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.planbook.GetBusinessesPlanbookForPlanRequest.prototype.hasSearch = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * repeated string type = 6;
 * @return {!Array<string>}
 */
proto.planbook.GetBusinessesPlanbookForPlanRequest.prototype.getTypeList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 6));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.planbook.GetBusinessesPlanbookForPlanRequest} returns this
 */
proto.planbook.GetBusinessesPlanbookForPlanRequest.prototype.setTypeList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.planbook.GetBusinessesPlanbookForPlanRequest} returns this
 */
proto.planbook.GetBusinessesPlanbookForPlanRequest.prototype.addType = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.planbook.GetBusinessesPlanbookForPlanRequest} returns this
 */
proto.planbook.GetBusinessesPlanbookForPlanRequest.prototype.clearTypeList = function() {
  return this.setTypeList([]);
};


/**
 * repeated string billing_type = 7;
 * @return {!Array<string>}
 */
proto.planbook.GetBusinessesPlanbookForPlanRequest.prototype.getBillingTypeList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 7));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.planbook.GetBusinessesPlanbookForPlanRequest} returns this
 */
proto.planbook.GetBusinessesPlanbookForPlanRequest.prototype.setBillingTypeList = function(value) {
  return jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.planbook.GetBusinessesPlanbookForPlanRequest} returns this
 */
proto.planbook.GetBusinessesPlanbookForPlanRequest.prototype.addBillingType = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.planbook.GetBusinessesPlanbookForPlanRequest} returns this
 */
proto.planbook.GetBusinessesPlanbookForPlanRequest.prototype.clearBillingTypeList = function() {
  return this.setBillingTypeList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.planbook.GetBusinessesPlanbookForPlanResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.planbook.GetBusinessesPlanbookForPlanResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.planbook.GetBusinessesPlanbookForPlanResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.planbook.GetBusinessesPlanbookForPlanResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.planbook.GetBusinessesPlanbookForPlanResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    businessesList: jspb.Message.toObjectList(msg.getBusinessesList(),
    proto.planbook.BusinessPlanbookForPlan.toObject, includeInstance),
    meta: (f = msg.getMeta()) && common_pb.PaginationMeta.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.planbook.GetBusinessesPlanbookForPlanResponse}
 */
proto.planbook.GetBusinessesPlanbookForPlanResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.planbook.GetBusinessesPlanbookForPlanResponse;
  return proto.planbook.GetBusinessesPlanbookForPlanResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.planbook.GetBusinessesPlanbookForPlanResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.planbook.GetBusinessesPlanbookForPlanResponse}
 */
proto.planbook.GetBusinessesPlanbookForPlanResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.planbook.BusinessPlanbookForPlan;
      reader.readMessage(value,proto.planbook.BusinessPlanbookForPlan.deserializeBinaryFromReader);
      msg.addBusinesses(value);
      break;
    case 2:
      var value = new common_pb.PaginationMeta;
      reader.readMessage(value,common_pb.PaginationMeta.deserializeBinaryFromReader);
      msg.setMeta(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.planbook.GetBusinessesPlanbookForPlanResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.planbook.GetBusinessesPlanbookForPlanResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.planbook.GetBusinessesPlanbookForPlanResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.planbook.GetBusinessesPlanbookForPlanResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBusinessesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.planbook.BusinessPlanbookForPlan.serializeBinaryToWriter
    );
  }
  f = message.getMeta();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.PaginationMeta.serializeBinaryToWriter
    );
  }
};


/**
 * repeated BusinessPlanbookForPlan businesses = 1;
 * @return {!Array<!proto.planbook.BusinessPlanbookForPlan>}
 */
proto.planbook.GetBusinessesPlanbookForPlanResponse.prototype.getBusinessesList = function() {
  return /** @type{!Array<!proto.planbook.BusinessPlanbookForPlan>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.planbook.BusinessPlanbookForPlan, 1));
};


/**
 * @param {!Array<!proto.planbook.BusinessPlanbookForPlan>} value
 * @return {!proto.planbook.GetBusinessesPlanbookForPlanResponse} returns this
*/
proto.planbook.GetBusinessesPlanbookForPlanResponse.prototype.setBusinessesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.planbook.BusinessPlanbookForPlan=} opt_value
 * @param {number=} opt_index
 * @return {!proto.planbook.BusinessPlanbookForPlan}
 */
proto.planbook.GetBusinessesPlanbookForPlanResponse.prototype.addBusinesses = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.planbook.BusinessPlanbookForPlan, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.planbook.GetBusinessesPlanbookForPlanResponse} returns this
 */
proto.planbook.GetBusinessesPlanbookForPlanResponse.prototype.clearBusinessesList = function() {
  return this.setBusinessesList([]);
};


/**
 * optional common.PaginationMeta meta = 2;
 * @return {?proto.common.PaginationMeta}
 */
proto.planbook.GetBusinessesPlanbookForPlanResponse.prototype.getMeta = function() {
  return /** @type{?proto.common.PaginationMeta} */ (
    jspb.Message.getWrapperField(this, common_pb.PaginationMeta, 2));
};


/**
 * @param {?proto.common.PaginationMeta|undefined} value
 * @return {!proto.planbook.GetBusinessesPlanbookForPlanResponse} returns this
*/
proto.planbook.GetBusinessesPlanbookForPlanResponse.prototype.setMeta = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.planbook.GetBusinessesPlanbookForPlanResponse} returns this
 */
proto.planbook.GetBusinessesPlanbookForPlanResponse.prototype.clearMeta = function() {
  return this.setMeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.planbook.GetBusinessesPlanbookForPlanResponse.prototype.hasMeta = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.planbook.PlansPlanbookForBusiness.prototype.toObject = function(opt_includeInstance) {
  return proto.planbook.PlansPlanbookForBusiness.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.planbook.PlansPlanbookForBusiness} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.planbook.PlansPlanbookForBusiness.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    upSpeed: jspb.Message.getFieldWithDefault(msg, 3, 0),
    downSpeed: jspb.Message.getFieldWithDefault(msg, 4, 0),
    upSpeedUnit: jspb.Message.getFieldWithDefault(msg, 5, ""),
    downSpeedUnit: jspb.Message.getFieldWithDefault(msg, 6, ""),
    isPostFup: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    dataLimit: jspb.Message.getFieldWithDefault(msg, 8, ""),
    type: jspb.Message.getFieldWithDefault(msg, 9, ""),
    billingType: jspb.Message.getFieldWithDefault(msg, 10, ""),
    price: jspb.Message.getFieldWithDefault(msg, 11, ""),
    period: jspb.Message.getFieldWithDefault(msg, 12, ""),
    customerCount: jspb.Message.getFieldWithDefault(msg, 13, 0),
    tenantId: jspb.Message.getFieldWithDefault(msg, 14, ""),
    planId: jspb.Message.getFieldWithDefault(msg, 15, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.planbook.PlansPlanbookForBusiness}
 */
proto.planbook.PlansPlanbookForBusiness.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.planbook.PlansPlanbookForBusiness;
  return proto.planbook.PlansPlanbookForBusiness.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.planbook.PlansPlanbookForBusiness} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.planbook.PlansPlanbookForBusiness}
 */
proto.planbook.PlansPlanbookForBusiness.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUpSpeed(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDownSpeed(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setUpSpeedUnit(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setDownSpeedUnit(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsPostFup(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setDataLimit(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setBillingType(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrice(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setPeriod(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCustomerCount(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setTenantId(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlanId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.planbook.PlansPlanbookForBusiness.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.planbook.PlansPlanbookForBusiness.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.planbook.PlansPlanbookForBusiness} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.planbook.PlansPlanbookForBusiness.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUpSpeed();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getDownSpeed();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getUpSpeedUnit();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getDownSpeedUnit();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getIsPostFup();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getBillingType();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getPrice();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getPeriod();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getCustomerCount();
  if (f !== 0) {
    writer.writeInt32(
      13,
      f
    );
  }
  f = message.getTenantId();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = message.getPlanId();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.planbook.PlansPlanbookForBusiness.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.planbook.PlansPlanbookForBusiness} returns this
 */
proto.planbook.PlansPlanbookForBusiness.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.planbook.PlansPlanbookForBusiness.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.planbook.PlansPlanbookForBusiness} returns this
 */
proto.planbook.PlansPlanbookForBusiness.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 up_speed = 3;
 * @return {number}
 */
proto.planbook.PlansPlanbookForBusiness.prototype.getUpSpeed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.planbook.PlansPlanbookForBusiness} returns this
 */
proto.planbook.PlansPlanbookForBusiness.prototype.setUpSpeed = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 down_speed = 4;
 * @return {number}
 */
proto.planbook.PlansPlanbookForBusiness.prototype.getDownSpeed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.planbook.PlansPlanbookForBusiness} returns this
 */
proto.planbook.PlansPlanbookForBusiness.prototype.setDownSpeed = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string up_speed_unit = 5;
 * @return {string}
 */
proto.planbook.PlansPlanbookForBusiness.prototype.getUpSpeedUnit = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.planbook.PlansPlanbookForBusiness} returns this
 */
proto.planbook.PlansPlanbookForBusiness.prototype.setUpSpeedUnit = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string down_speed_unit = 6;
 * @return {string}
 */
proto.planbook.PlansPlanbookForBusiness.prototype.getDownSpeedUnit = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.planbook.PlansPlanbookForBusiness} returns this
 */
proto.planbook.PlansPlanbookForBusiness.prototype.setDownSpeedUnit = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional bool is_post_fup = 7;
 * @return {boolean}
 */
proto.planbook.PlansPlanbookForBusiness.prototype.getIsPostFup = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.planbook.PlansPlanbookForBusiness} returns this
 */
proto.planbook.PlansPlanbookForBusiness.prototype.setIsPostFup = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional string data_limit = 8;
 * @return {string}
 */
proto.planbook.PlansPlanbookForBusiness.prototype.getDataLimit = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.planbook.PlansPlanbookForBusiness} returns this
 */
proto.planbook.PlansPlanbookForBusiness.prototype.setDataLimit = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.planbook.PlansPlanbookForBusiness} returns this
 */
proto.planbook.PlansPlanbookForBusiness.prototype.clearDataLimit = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.planbook.PlansPlanbookForBusiness.prototype.hasDataLimit = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional string type = 9;
 * @return {string}
 */
proto.planbook.PlansPlanbookForBusiness.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.planbook.PlansPlanbookForBusiness} returns this
 */
proto.planbook.PlansPlanbookForBusiness.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string billing_type = 10;
 * @return {string}
 */
proto.planbook.PlansPlanbookForBusiness.prototype.getBillingType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.planbook.PlansPlanbookForBusiness} returns this
 */
proto.planbook.PlansPlanbookForBusiness.prototype.setBillingType = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string price = 11;
 * @return {string}
 */
proto.planbook.PlansPlanbookForBusiness.prototype.getPrice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.planbook.PlansPlanbookForBusiness} returns this
 */
proto.planbook.PlansPlanbookForBusiness.prototype.setPrice = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string period = 12;
 * @return {string}
 */
proto.planbook.PlansPlanbookForBusiness.prototype.getPeriod = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.planbook.PlansPlanbookForBusiness} returns this
 */
proto.planbook.PlansPlanbookForBusiness.prototype.setPeriod = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional int32 customer_count = 13;
 * @return {number}
 */
proto.planbook.PlansPlanbookForBusiness.prototype.getCustomerCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.planbook.PlansPlanbookForBusiness} returns this
 */
proto.planbook.PlansPlanbookForBusiness.prototype.setCustomerCount = function(value) {
  return jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional string tenant_id = 14;
 * @return {string}
 */
proto.planbook.PlansPlanbookForBusiness.prototype.getTenantId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * @param {string} value
 * @return {!proto.planbook.PlansPlanbookForBusiness} returns this
 */
proto.planbook.PlansPlanbookForBusiness.prototype.setTenantId = function(value) {
  return jspb.Message.setProto3StringField(this, 14, value);
};


/**
 * optional string plan_id = 15;
 * @return {string}
 */
proto.planbook.PlansPlanbookForBusiness.prototype.getPlanId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/**
 * @param {string} value
 * @return {!proto.planbook.PlansPlanbookForBusiness} returns this
 */
proto.planbook.PlansPlanbookForBusiness.prototype.setPlanId = function(value) {
  return jspb.Message.setProto3StringField(this, 15, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.planbook.GetPlansPlanbookForBusinessRequest.repeatedFields_ = [5,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.planbook.GetPlansPlanbookForBusinessRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.planbook.GetPlansPlanbookForBusinessRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.planbook.GetPlansPlanbookForBusinessRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.planbook.GetPlansPlanbookForBusinessRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    authContext: (f = msg.getAuthContext()) && common_pb.AuthContext.toObject(includeInstance, f),
    limit: jspb.Message.getFieldWithDefault(msg, 2, 0),
    offset: jspb.Message.getFieldWithDefault(msg, 3, 0),
    search: jspb.Message.getFieldWithDefault(msg, 4, ""),
    typesList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f,
    billingTypesList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f,
    businessId: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.planbook.GetPlansPlanbookForBusinessRequest}
 */
proto.planbook.GetPlansPlanbookForBusinessRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.planbook.GetPlansPlanbookForBusinessRequest;
  return proto.planbook.GetPlansPlanbookForBusinessRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.planbook.GetPlansPlanbookForBusinessRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.planbook.GetPlansPlanbookForBusinessRequest}
 */
proto.planbook.GetPlansPlanbookForBusinessRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.AuthContext;
      reader.readMessage(value,common_pb.AuthContext.deserializeBinaryFromReader);
      msg.setAuthContext(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLimit(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOffset(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSearch(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addTypes(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.addBillingTypes(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setBusinessId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.planbook.GetPlansPlanbookForBusinessRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.planbook.GetPlansPlanbookForBusinessRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.planbook.GetPlansPlanbookForBusinessRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.planbook.GetPlansPlanbookForBusinessRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAuthContext();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_pb.AuthContext.serializeBinaryToWriter
    );
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getOffset();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getSearch();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getTypesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
  f = message.getBillingTypesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      6,
      f
    );
  }
  f = message.getBusinessId();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional common.AuthContext auth_context = 1;
 * @return {?proto.common.AuthContext}
 */
proto.planbook.GetPlansPlanbookForBusinessRequest.prototype.getAuthContext = function() {
  return /** @type{?proto.common.AuthContext} */ (
    jspb.Message.getWrapperField(this, common_pb.AuthContext, 1));
};


/**
 * @param {?proto.common.AuthContext|undefined} value
 * @return {!proto.planbook.GetPlansPlanbookForBusinessRequest} returns this
*/
proto.planbook.GetPlansPlanbookForBusinessRequest.prototype.setAuthContext = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.planbook.GetPlansPlanbookForBusinessRequest} returns this
 */
proto.planbook.GetPlansPlanbookForBusinessRequest.prototype.clearAuthContext = function() {
  return this.setAuthContext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.planbook.GetPlansPlanbookForBusinessRequest.prototype.hasAuthContext = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 limit = 2;
 * @return {number}
 */
proto.planbook.GetPlansPlanbookForBusinessRequest.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.planbook.GetPlansPlanbookForBusinessRequest} returns this
 */
proto.planbook.GetPlansPlanbookForBusinessRequest.prototype.setLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 offset = 3;
 * @return {number}
 */
proto.planbook.GetPlansPlanbookForBusinessRequest.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.planbook.GetPlansPlanbookForBusinessRequest} returns this
 */
proto.planbook.GetPlansPlanbookForBusinessRequest.prototype.setOffset = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string search = 4;
 * @return {string}
 */
proto.planbook.GetPlansPlanbookForBusinessRequest.prototype.getSearch = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.planbook.GetPlansPlanbookForBusinessRequest} returns this
 */
proto.planbook.GetPlansPlanbookForBusinessRequest.prototype.setSearch = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated string types = 5;
 * @return {!Array<string>}
 */
proto.planbook.GetPlansPlanbookForBusinessRequest.prototype.getTypesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.planbook.GetPlansPlanbookForBusinessRequest} returns this
 */
proto.planbook.GetPlansPlanbookForBusinessRequest.prototype.setTypesList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.planbook.GetPlansPlanbookForBusinessRequest} returns this
 */
proto.planbook.GetPlansPlanbookForBusinessRequest.prototype.addTypes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.planbook.GetPlansPlanbookForBusinessRequest} returns this
 */
proto.planbook.GetPlansPlanbookForBusinessRequest.prototype.clearTypesList = function() {
  return this.setTypesList([]);
};


/**
 * repeated string billing_types = 6;
 * @return {!Array<string>}
 */
proto.planbook.GetPlansPlanbookForBusinessRequest.prototype.getBillingTypesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 6));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.planbook.GetPlansPlanbookForBusinessRequest} returns this
 */
proto.planbook.GetPlansPlanbookForBusinessRequest.prototype.setBillingTypesList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.planbook.GetPlansPlanbookForBusinessRequest} returns this
 */
proto.planbook.GetPlansPlanbookForBusinessRequest.prototype.addBillingTypes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.planbook.GetPlansPlanbookForBusinessRequest} returns this
 */
proto.planbook.GetPlansPlanbookForBusinessRequest.prototype.clearBillingTypesList = function() {
  return this.setBillingTypesList([]);
};


/**
 * optional string business_id = 7;
 * @return {string}
 */
proto.planbook.GetPlansPlanbookForBusinessRequest.prototype.getBusinessId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.planbook.GetPlansPlanbookForBusinessRequest} returns this
 */
proto.planbook.GetPlansPlanbookForBusinessRequest.prototype.setBusinessId = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.planbook.GetPlansPlanbookForBusinessResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.planbook.GetPlansPlanbookForBusinessResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.planbook.GetPlansPlanbookForBusinessResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.planbook.GetPlansPlanbookForBusinessResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.planbook.GetPlansPlanbookForBusinessResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    plansList: jspb.Message.toObjectList(msg.getPlansList(),
    proto.planbook.PlansPlanbookForBusiness.toObject, includeInstance),
    meta: (f = msg.getMeta()) && common_pb.PaginationMeta.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.planbook.GetPlansPlanbookForBusinessResponse}
 */
proto.planbook.GetPlansPlanbookForBusinessResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.planbook.GetPlansPlanbookForBusinessResponse;
  return proto.planbook.GetPlansPlanbookForBusinessResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.planbook.GetPlansPlanbookForBusinessResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.planbook.GetPlansPlanbookForBusinessResponse}
 */
proto.planbook.GetPlansPlanbookForBusinessResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.planbook.PlansPlanbookForBusiness;
      reader.readMessage(value,proto.planbook.PlansPlanbookForBusiness.deserializeBinaryFromReader);
      msg.addPlans(value);
      break;
    case 2:
      var value = new common_pb.PaginationMeta;
      reader.readMessage(value,common_pb.PaginationMeta.deserializeBinaryFromReader);
      msg.setMeta(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.planbook.GetPlansPlanbookForBusinessResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.planbook.GetPlansPlanbookForBusinessResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.planbook.GetPlansPlanbookForBusinessResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.planbook.GetPlansPlanbookForBusinessResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlansList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.planbook.PlansPlanbookForBusiness.serializeBinaryToWriter
    );
  }
  f = message.getMeta();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.PaginationMeta.serializeBinaryToWriter
    );
  }
};


/**
 * repeated PlansPlanbookForBusiness plans = 1;
 * @return {!Array<!proto.planbook.PlansPlanbookForBusiness>}
 */
proto.planbook.GetPlansPlanbookForBusinessResponse.prototype.getPlansList = function() {
  return /** @type{!Array<!proto.planbook.PlansPlanbookForBusiness>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.planbook.PlansPlanbookForBusiness, 1));
};


/**
 * @param {!Array<!proto.planbook.PlansPlanbookForBusiness>} value
 * @return {!proto.planbook.GetPlansPlanbookForBusinessResponse} returns this
*/
proto.planbook.GetPlansPlanbookForBusinessResponse.prototype.setPlansList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.planbook.PlansPlanbookForBusiness=} opt_value
 * @param {number=} opt_index
 * @return {!proto.planbook.PlansPlanbookForBusiness}
 */
proto.planbook.GetPlansPlanbookForBusinessResponse.prototype.addPlans = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.planbook.PlansPlanbookForBusiness, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.planbook.GetPlansPlanbookForBusinessResponse} returns this
 */
proto.planbook.GetPlansPlanbookForBusinessResponse.prototype.clearPlansList = function() {
  return this.setPlansList([]);
};


/**
 * optional common.PaginationMeta meta = 2;
 * @return {?proto.common.PaginationMeta}
 */
proto.planbook.GetPlansPlanbookForBusinessResponse.prototype.getMeta = function() {
  return /** @type{?proto.common.PaginationMeta} */ (
    jspb.Message.getWrapperField(this, common_pb.PaginationMeta, 2));
};


/**
 * @param {?proto.common.PaginationMeta|undefined} value
 * @return {!proto.planbook.GetPlansPlanbookForBusinessResponse} returns this
*/
proto.planbook.GetPlansPlanbookForBusinessResponse.prototype.setMeta = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.planbook.GetPlansPlanbookForBusinessResponse} returns this
 */
proto.planbook.GetPlansPlanbookForBusinessResponse.prototype.clearMeta = function() {
  return this.setMeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.planbook.GetPlansPlanbookForBusinessResponse.prototype.hasMeta = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.planbook);
